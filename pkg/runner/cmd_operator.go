/*
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.
 * Licensed under the Universal Permissive License v 1.0 as shown at
 * http://oss.oracle.com/licenses/upl.
 */

package runner

import (
	"context"
	"crypto/tls"
	"fmt"
	coh "github.com/oracle/coherence-operator/api/v1"
	"github.com/oracle/coherence-operator/controllers"
	"github.com/oracle/coherence-operator/controllers/webhook"
	"github.com/oracle/coherence-operator/pkg/clients"
	"github.com/oracle/coherence-operator/pkg/operator"
	"github.com/oracle/coherence-operator/pkg/rest"
	"github.com/pkg/errors"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	apiruntime "k8s.io/apimachinery/pkg/runtime"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/util/version"
	clientgoscheme "k8s.io/client-go/kubernetes/scheme"
	rest2 "k8s.io/client-go/rest"
	"k8s.io/utils/ptr"
	"net/http"
	"os"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/cache"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/config"
	"sigs.k8s.io/controller-runtime/pkg/healthz"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/metrics/filters"
	metricsserver "sigs.k8s.io/controller-runtime/pkg/metrics/server"
	hooks "sigs.k8s.io/controller-runtime/pkg/webhook"
	// +kubebuilder:scaffold:imports
)

const (
	// CommandOperator is the argument to launch the Operator manager.
	CommandOperator = "operator"

	// lockName is the name of the lock used for leadership election.
	// This value should not be changed, otherwise a rolling upgrade of the Operator
	// would have two leaders.
	lockName = "ca804aa8.oracle.com"
)

var (
	scheme   = apiruntime.NewScheme()
	setupLog = ctrl.Log.WithName("setup")
)

func init() {
	utilruntime.Must(clientgoscheme.AddToScheme(scheme))
	utilruntime.Must(coh.AddToScheme(scheme))
	// +kubebuilder:scaffold:scheme
}

// operatorCommand runs the Coherence Operator manager
func operatorCommand(v *viper.Viper) *cobra.Command {
	cmd := &cobra.Command{
		Use:   CommandOperator,
		Short: "Run the Coherence Operator",
		Long:  "Run the Coherence Operator",
		RunE: func(cmd *cobra.Command, args []string) error {
			return execute()
		},
	}

	operator.SetupOperatorManagerFlags(cmd, v)

	return cmd
}

func execute() error {
	ctrl.SetLogger(zap.New(zap.UseDevMode(true)))

	setupLog.Info(fmt.Sprintf("Operator Coherence Image: %s", operator.GetDefaultCoherenceImage()))
	setupLog.Info(fmt.Sprintf("Operator Image: %s", operator.GetDefaultOperatorImage()))

	// if the enable-http2 flag is false (the default), http/2 should be disabled
	// due to its vulnerabilities. More specifically, disabling http/2 will
	// prevent from being vulnerable to the HTTP/2 Stream Cancellation and
	// Rapid Reset CVEs. For more information see:
	// - https://github.com/advisories/GHSA-qppj-fm5r-hxr3
	// - https://github.com/advisories/GHSA-4374-p667-p6c8
	disableHTTP2 := func(c *tls.Config) {
		setupLog.Info("disabling http/2")
		c.NextProtos = []string{"http/1.1"}
	}

	vpr := operator.GetViper()

	var tlsOpts []func(*tls.Config)
	enableHTTP2 := vpr.GetBool(operator.FlagEnableHttp2)
	if !enableHTTP2 {
		tlsOpts = append(tlsOpts, disableHTTP2)
	}

	cfg := ctrl.GetConfigOrDie()
	cs, err := clients.NewForConfig(cfg)
	if err != nil {
		return errors.Wrap(err, "unable to create client set")
	}

	// create the client here as we use it to install CRDs then inject it into the Manager
	setupLog.Info("Creating Kubernetes client", "Host", cfg.Host)
	cl, err := client.New(cfg, client.Options{Scheme: scheme})
	if err != nil {
		return errors.Wrap(err, "unable to create client")
	}

	dryRun := operator.IsDryRun()
	secureMetrics := vpr.GetBool(operator.FlagSecureMetrics)

	// Metrics endpoint is enabled in 'config/default/kustomization.yaml'. The Metrics options configure the server.
	// More info:
	// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.19.0/pkg/metrics/server
	// - https://book.kubebuilder.io/reference/metrics.html
	metricsServerOptions := metricsserver.Options{
		BindAddress:   viper.GetString(operator.FlagMetricsAddress),
		SecureServing: secureMetrics,
		// TODO(user): TLSOpts is used to allow configuring the TLS config used for the server. If certificates are
		// not provided, self-signed certificates will be generated by default. This option is not recommended for
		// production environments as self-signed certificates do not offer the same level of trust and security
		// as certificates issued by a trusted Certificate Authority (CA). The primary risk is potentially allowing
		// unauthorized access to sensitive metrics data. Consider replacing with CertDir, CertName, and KeyName
		// to provide certificates, ensuring the server communicates using trusted and secure certificates.
		TLSOpts: tlsOpts,
	}

	if secureMetrics {
		// FilterProvider is used to protect the metrics endpoint with authn/authz.
		// These configurations ensure that only authorized users and service accounts
		// can access the metrics endpoint. The RBAC are configured in 'config/rbac/kustomization.yaml'. More info:
		// https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.19.0/pkg/metrics/filters#WithAuthenticationAndAuthorization
		metricsServerOptions.FilterProvider = filters.WithAuthenticationAndAuthorization
	}

	webhookServer := hooks.NewServer(hooks.Options{
		TLSOpts: tlsOpts,
	})

	options := ctrl.Options{
		Scheme:                 scheme,
		HealthProbeBindAddress: viper.GetString(operator.FlagHealthAddress),
		Metrics:                metricsServerOptions,
		WebhookServer:          webhookServer,
		LeaderElection:         viper.GetBool(operator.FlagLeaderElection),
		LeaderElectionID:       lockName,
		Controller: config.Controller{
			SkipNameValidation: ptr.To(dryRun),
		},
	}

	// Determine the Operator scope...
	watchNamespaces := operator.GetWatchNamespace()
	switch len(watchNamespaces) {
	case 0:
		// Watching all namespaces
		setupLog.Info("Operator will watch all namespaces")
	case 1:
		// Watch a single namespace
		setupLog.Info("Operator will watch single namespace: " + watchNamespaces[0])
		options.NewCache = func(config *rest2.Config, opts cache.Options) (cache.Cache, error) {
			opts.DefaultNamespaces = map[string]cache.Config{
				watchNamespaces[0]: {},
			}
			return cache.New(config, opts)
		}
	default:
		// Watch a multiple namespaces
		setupLog.Info(fmt.Sprintf("Operator will watch multiple namespaces: %v", watchNamespaces))
		options.NewCache = func(config *rest2.Config, opts cache.Options) (cache.Cache, error) {
			nsMap := make(map[string]cache.Config)
			for _, ns := range watchNamespaces {
				nsMap[ns] = cache.Config{}
			}
			opts.DefaultNamespaces = nsMap
			return cache.New(config, opts)
		}
	}

	mgr, err := manager.New(cfg, options)
	if err != nil {
		return errors.Wrap(err, "unable to create controller manager")
	}

	v, err := operator.DetectKubernetesVersion(cs)
	if err != nil {
		return errors.Wrap(err, "unable to detect Kubernetes version")
	}

	ctx := context.TODO()
	initialiseOperator(ctx, v, cl)

	// Set up the Coherence reconciler
	if err = (&controllers.CoherenceReconciler{
		Client:    mgr.GetClient(),
		ClientSet: cs,
		Log:       ctrl.Log.WithName("controllers").WithName("Coherence"),
		Scheme:    mgr.GetScheme(),
	}).SetupWithManager(mgr, cs); err != nil {
		return errors.Wrap(err, "unable to create Coherence controller")
	}

	// Set up the CoherenceJob reconciler
	if operator.ShouldInstallJobCRD() {
		if err = (&controllers.CoherenceJobReconciler{
			Client:    mgr.GetClient(),
			ClientSet: cs,
			Log:       ctrl.Log.WithName("controllers").WithName("CoherenceJob"),
			Scheme:    mgr.GetScheme(),
		}).SetupWithManager(mgr, cs); err != nil {
			return errors.Wrap(err, "unable to create CoherenceJob controller")
		}
	}

	if !dryRun {
		// We intercept the signal handler here so that we can do clean-up before the Manager stops
		handler := ctrl.SetupSignalHandler()

		// Set-up webhooks if required
		var cr *webhook.CertReconciler
		if operator.ShouldEnableWebhooks() {
			// Set up the webhook certificate reconciler
			cr = &webhook.CertReconciler{
				Clientset: cs,
			}
			if err := cr.SetupWithManager(handler, mgr, cs); err != nil {
				return errors.Wrap(err, " unable to create webhook certificate controller")
			}

			// Set up the webhooks
			if err = (&coh.Coherence{}).SetupWebhookWithManager(mgr); err != nil {
				return errors.Wrap(err, " unable to create webhook")
			}
		} else {
			setupLog.Info("Operator is running with web-hooks disabled")
		}

		// Create the REST server
		restServer := rest.NewServer(cs.KubeClient)
		if err := restServer.SetupWithManager(mgr); err != nil {
			return errors.Wrap(err, " unable to start REST server")
		}

		var health healthz.Checker = func(_ *http.Request) error {
			<-restServer.Running()
			return nil
		}

		if err := mgr.AddHealthzCheck("health", health); err != nil {
			return errors.Wrap(err, "unable to set up health check")
		}
		if err := mgr.AddReadyzCheck("ready", health); err != nil {
			return errors.Wrap(err, "unable to set up ready check")
		}

		// +kubebuilder:scaffold:builder

		go func() {
			<-handler.Done()
			if cr != nil {
				cr.Cleanup()
			}
		}()

		setupLog.Info("starting manager")
		if err := mgr.Start(handler); err != nil {
			setupLog.Error(err, "problem running manager")
			os.Exit(1)
		}
	}

	return nil
}

func initialiseOperator(ctx context.Context, v *version.Version, cl client.Client) {
	opLog := ctrl.Log.WithName("operator")

	// Ensure that the CRDs exist
	if operator.ShouldInstallCRDs() {
		err := coh.EnsureCRDs(ctx, v, scheme, cl)
		if err != nil {
			opLog.Error(err, "")
			os.Exit(1)
		}
	}
}
