apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: coherenceroles.coherence.oracle.com
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.role
    description: The name of this role
    name: Role
    type: string
  - JSONPath: .metadata.labels.coherenceCluster
    description: The name of the Coherence cluster that this role belongs to
    name: Cluster
    type: string
  - JSONPath: .spec.replicas
    description: The number of Coherence Pods for this role
    name: Replicas
    type: integer
  - JSONPath: .status.readyReplicas
    description: The number of ready Coherence Pods for this role
    name: Ready
    type: integer
  - JSONPath: .status.status
    description: The status of this role
    name: Status
    type: string
  group: coherence.oracle.com
  names:
    categories:
    - coherence
    kind: CoherenceRole
    listKind: CoherenceRoleList
    plural: coherenceroles
    shortNames:
    - cohrole
    singular: coherencerole
  scope: Namespaced
  subresources:
    scale:
      labelSelectorPath: .status.selector
      specReplicasPath: .spec.replicas
      statusReplicasPath: .status.replicas
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            affinity:
              description: 'Affinity controls Pod scheduling preferences.   ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity'
              type: object
            annotations:
              additionalProperties:
                type: string
              description: 'Annotations are free-form yaml that will be added to the
                store release as annotations Any annotations should be placed BELOW
                this annotations: key. For example if we wanted to include annotations
                for Prometheus it would look like this:  annotations:   prometheus.io/scrape:
                "true"   prometheus.io/port: "2408"'
              type: object
            application:
              description: The optional application definition
              properties:
                appDir:
                  description: The application folder in the custom artifacts Docker
                    image containing application artifacts. This will effectively
                    become the working directory of the Coherence container. If not
                    set the application directory default value is "/app".
                  type: string
                args:
                  description: Args is the optional arguments to pass to the main
                    class.
                  items:
                    type: string
                  type: array
                configDir:
                  description: The folder in the custom artifacts Docker image containing
                    configuration files to be added to the classpath of the Coherence
                    container. If not set the config directory default value is "/app/conf".
                  type: string
                image:
                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images'
                  type: string
                imagePullPolicy:
                  description: 'Image pull policy. One of Always, Never, IfNotPresent.
                    More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                  type: string
                libDir:
                  description: The folder in the custom artifacts Docker image containing
                    jar files to be added to the classpath of the Coherence container.
                    If not set the lib directory default value is "/app/lib".
                  type: string
                main:
                  description: Class is the Coherence container main class.  The default
                    value is com.tangosol.net.DefaultCacheServer. If the application
                    type is non-Java this would be the name of the corresponding language
                    specific runnable, for example if the application type is "node"
                    the main may be a Javascript file.
                  type: string
                type:
                  description: The application type to execute. This field would be
                    set if using the Coherence Graal image and running a none-Java
                    application. For example if the application was a Node application
                    this field would be set to "node". The default is to run a plain
                    Java application.
                  type: string
              type: object
            coherence:
              description: The optional application definition
              properties:
                cacheConfig:
                  description: CacheConfig is the name of the cache configuration
                    file to use
                  type: string
                image:
                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images'
                  type: string
                imagePullPolicy:
                  description: 'Image pull policy. One of Always, Never, IfNotPresent.
                    More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                  type: string
                logLevel:
                  description: The Coherence log level, default being 5 (info level).
                  format: int32
                  type: integer
                management:
                  description: 'Management configures Coherence management over REST   Note:
                    Coherence management over REST will be available in 12.2.1.4.'
                  properties:
                    enabled:
                      description: Enable or disable flag.
                      type: boolean
                    port:
                      description: The port to bind to.
                      format: int32
                      type: integer
                    ssl:
                      description: SSL configures SSL settings for a Coherence component
                      properties:
                        enabled:
                          description: Enabled is a boolean flag indicating whether
                            enables or disables SSL on the Coherence management over
                            REST endpoint, the default is false (disabled).
                          type: boolean
                        keyPasswordFile:
                          description: KeyStorePasswordFile is the name of the file
                            in the k8s secret containing the key   password when configuring
                            component over REST to use SSL.
                          type: string
                        keyStore:
                          description: Keystore is the name of the Java key store
                            file in the k8s secret to use as the SSL keystore   when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreAlgorithm:
                          description: KeyStoreAlgorithm is the name of the keystore
                            algorithm for the keystore in the k8s secret   used when
                            configuring component over REST to use SSL. If not set
                            the default is SunX509
                          type: string
                        keyStorePasswordFile:
                          description: KeyStorePasswordFile is the name of the file
                            in the k8s secret containing the keystore   password when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreProvider:
                          description: KeyStoreProvider is the name of the keystore
                            provider for the keystore in the k8s secret   used when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreType:
                          description: KeyStoreType is the name of the Java keystore
                            type for the keystore in the k8s secret used   when configuring
                            component over REST to use SSL. If not set the default
                            is JKS.
                          type: string
                        requireClientCert:
                          description: RequireClientCert is a boolean flag indicating
                            whether the client certificate will be   authenticated
                            by the server (two-way SSL) when configuring component
                            over REST to use SSL.   If not set the default is false
                          type: boolean
                        secrets:
                          description: Secrets is the name of the k8s secrets containing
                            the Java key stores and password files.   This value MUST
                            be provided if SSL is enabled on the Coherence management
                            over ReST endpoint.
                          type: string
                        trustStore:
                          description: TrustStore is the name of the Java trust store
                            file in the k8s secret to use as the SSL   trust store
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreAlgorithm:
                          description: TrustStoreAlgorithm is the name of the keystore
                            algorithm for the trust store in the k8s   secret used
                            when configuring component over REST to use SSL.  If not
                            set the default is SunX509.
                          type: string
                        trustStorePasswordFile:
                          description: TrustStorePasswordFile is the name of the file
                            in the k8s secret containing the trust store   password
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreProvider:
                          description: TrustStoreProvider is the name of the keystore
                            provider for the trust store in the k8s   secret used
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreType:
                          description: TrustStoreType is the name of the Java keystore
                            type for the trust store in the k8s secret   used when
                            configuring component over REST to use SSL. If not set
                            the default is JKS.
                          type: string
                      required:
                      - keyStore
                      type: object
                  type: object
                metrics:
                  description: 'Metrics configures Coherence metrics publishing   Note:
                    Coherence metrics publishing will be available in 12.2.1.4.'
                  properties:
                    enabled:
                      description: Enable or disable flag.
                      type: boolean
                    port:
                      description: The port to bind to.
                      format: int32
                      type: integer
                    ssl:
                      description: SSL configures SSL settings for a Coherence component
                      properties:
                        enabled:
                          description: Enabled is a boolean flag indicating whether
                            enables or disables SSL on the Coherence management over
                            REST endpoint, the default is false (disabled).
                          type: boolean
                        keyPasswordFile:
                          description: KeyStorePasswordFile is the name of the file
                            in the k8s secret containing the key   password when configuring
                            component over REST to use SSL.
                          type: string
                        keyStore:
                          description: Keystore is the name of the Java key store
                            file in the k8s secret to use as the SSL keystore   when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreAlgorithm:
                          description: KeyStoreAlgorithm is the name of the keystore
                            algorithm for the keystore in the k8s secret   used when
                            configuring component over REST to use SSL. If not set
                            the default is SunX509
                          type: string
                        keyStorePasswordFile:
                          description: KeyStorePasswordFile is the name of the file
                            in the k8s secret containing the keystore   password when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreProvider:
                          description: KeyStoreProvider is the name of the keystore
                            provider for the keystore in the k8s secret   used when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreType:
                          description: KeyStoreType is the name of the Java keystore
                            type for the keystore in the k8s secret used   when configuring
                            component over REST to use SSL. If not set the default
                            is JKS.
                          type: string
                        requireClientCert:
                          description: RequireClientCert is a boolean flag indicating
                            whether the client certificate will be   authenticated
                            by the server (two-way SSL) when configuring component
                            over REST to use SSL.   If not set the default is false
                          type: boolean
                        secrets:
                          description: Secrets is the name of the k8s secrets containing
                            the Java key stores and password files.   This value MUST
                            be provided if SSL is enabled on the Coherence management
                            over ReST endpoint.
                          type: string
                        trustStore:
                          description: TrustStore is the name of the Java trust store
                            file in the k8s secret to use as the SSL   trust store
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreAlgorithm:
                          description: TrustStoreAlgorithm is the name of the keystore
                            algorithm for the trust store in the k8s   secret used
                            when configuring component over REST to use SSL.  If not
                            set the default is SunX509.
                          type: string
                        trustStorePasswordFile:
                          description: TrustStorePasswordFile is the name of the file
                            in the k8s secret containing the trust store   password
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreProvider:
                          description: TrustStoreProvider is the name of the keystore
                            provider for the trust store in the k8s   secret used
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreType:
                          description: TrustStoreType is the name of the Java keystore
                            type for the trust store in the k8s secret   used when
                            configuring component over REST to use SSL. If not set
                            the default is JKS.
                          type: string
                      required:
                      - keyStore
                      type: object
                  type: object
                overrideConfig:
                  description: OverrideConfig is name of the Coherence operational
                    configuration override file, the default is tangosol-coherence-override.xml
                  type: string
                persistence:
                  description: Persistence values configure the on-disc data persistence
                    settings. The bool Enabled enables or disabled on disc persistence
                    of data.
                  properties:
                    enabled:
                      type: boolean
                    persistentVolumeClaim:
                      description: PersistentVolumeClaim allows the configuration
                        of a normal k8s persistent volume claim for persistence data.
                      type: object
                    volume:
                      description: Volume allows the configuration of a normal k8s
                        volume mapping for persistence data instead of a persistent
                        volume claim. If a value is defined for store.persistence.volume
                        then no PVC will be created and persistence data will instead
                        be written to this volume. It is up to the deployer to understand
                        the consequences of this and how the guarantees given when
                        using PVCs differ to the storage guarantees for the particular
                        volume type configured here.
                      type: object
                  type: object
                snapshot:
                  description: Snapshot values configure the on-disc persistence data
                    snapshot (backup) settings. The bool Enabled enables or disabled
                    a different location for persistence snapshot data. If set to
                    false then snapshot files will be written to the same volume configured
                    for persistence data in the Persistence section.
                  properties:
                    enabled:
                      type: boolean
                    persistentVolumeClaim:
                      description: PersistentVolumeClaim allows the configuration
                        of a normal k8s persistent volume claim for persistence data.
                      type: object
                    volume:
                      description: Volume allows the configuration of a normal k8s
                        volume mapping for persistence data instead of a persistent
                        volume claim. If a value is defined for store.persistence.volume
                        then no PVC will be created and persistence data will instead
                        be written to this volume. It is up to the deployer to understand
                        the consequences of this and how the guarantees given when
                        using PVCs differ to the storage guarantees for the particular
                        volume type configured here.
                      type: object
                  type: object
                storageEnabled:
                  description: A boolean flag indicating whether members of this role
                    are storage enabled. This value will set the corresponding coherence.distributed.localstorage
                    System property. If not specified the default value is true. This
                    flag is also used to configure the ScalingPolicy value if a value
                    is not specified. If the StorageEnabled field is not specified
                    or is true the scaling will be safe, if StorageEnabled is set
                    to false scaling will be parallel.
                  type: boolean
              type: object
            coherenceUtils:
              description: The configuration for the Coherence utils image
              properties:
                image:
                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images'
                  type: string
                imagePullPolicy:
                  description: 'Image pull policy. One of Always, Never, IfNotPresent.
                    More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                  type: string
              type: object
            env:
              description: 'Env is additional environment variable mappings that will
                be passed to the Coherence container in the Pod To specify extra variables
                add them as name value pairs the same as they would be added to a
                Pod containers spec, for example these values:  env:   - name "FOO"     value:
                "foo-value"   - name: "BAR"     value "bar-value"  will add the environment
                variable mappings FOO="foo-value" and BAR="bar-value"'
              items:
                type: object
              type: array
            healthPort:
              description: The port that the health check endpoint will bind to.
              format: int32
              type: integer
            jvm:
              description: The JVM specific options
              properties:
                args:
                  description: 'Args specifies the options (System properties, -XX:
                    args etc) to pass to the JVM.'
                  items:
                    type: string
                  type: array
                debug:
                  description: The settings for enabling debug mode in the JVM.
                  properties:
                    attach:
                      description: Attach specifies the address of the debugger that
                        the JVM should attempt to connect back to instead of listening
                        on a port.
                      type: string
                    enabled:
                      description: Enabled is a flag to enable or disable running
                        the JVM in debug mode. Default is disabled.
                      type: boolean
                    port:
                      description: The port that the debugger will listen on; the
                        default is 5005.
                      format: int32
                      type: integer
                    suspend:
                      description: A boolean true if the target VM is to be suspended
                        immediately before the main class is loaded; false otherwise.
                        The default value is false.
                      type: boolean
                  type: object
                diagnosticsVolume:
                  type: object
                flightRecorder:
                  description: If set to true, enabled continuour flight recorder
                    recordings. This will add the JVM options -XX:+UnlockCommercialFeatures
                    -XX:+FlightRecorder -XX:FlightRecorderOptions=defaultrecording=true,dumponexit=true,dumponexitpath=/dumps
                  type: boolean
                gc:
                  description: Set JVM garbage collector options.
                  properties:
                    args:
                      description: Args specifies the GC options to pass to the JVM.
                      items:
                        type: string
                      type: array
                    enabled:
                      description: The name of the JVM garbage collector to use. G1
                        - adds the -XX:+UseG1GC option CMS - adds the -XX:+UseConcMarkSweepGC
                        option Parallel - adds the -XX:+UseParallelGC Default - use
                        the JVMs default collector The field value is case insensitive
                        If not set G1 is used. If set to a value other than those
                        above then the default collector for the JVM will be used.
                      type: string
                    logging:
                      description: Enable the following GC logging args  -verbose:gc
                        -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC
                        -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime
                        -XX:+PrintGCApplicationConcurrentTime Default is true
                      type: boolean
                  type: object
                jmxmp:
                  description: Configure JMX using JMXMP.
                  properties:
                    enabled:
                      description: If set to true the JMXMP support will be enabled.
                        Default is false
                      type: boolean
                    port:
                      description: The port tht the JMXMP MBeanServer should bind
                        to. If not set the default port is 9099
                      format: int32
                      type: integer
                  type: object
                memory:
                  description: Configure the JVM memory options.
                  properties:
                    directMemorySize:
                      description: DirectMemorySize sets the maximum total size (in
                        bytes) of the New I/O (the java.nio package) direct-buffer
                        allocations. This value sets the -XX:MaxDirectMemorySize JVM
                        option. If not set the JVM defaults are used.
                      type: string
                    heapSize:
                      description: HeapSize is the min/max heap value to pass to the
                        JVM. The format should be the same as that used for Java's
                        -Xms and -Xmx JVM options. If not set the JVM defaults are
                        used.
                      type: string
                    metaspaceSize:
                      description: MetaspaceSize is the min/max metaspace size to
                        pass to the JVM. This sets the -XX:MetaspaceSize and -XX:MaxMetaspaceSize=size
                        JVM options. If not set the JVM defaults are used.
                      type: string
                    nativeMemoryTracking:
                      description: Adds the -XX:NativeMemoryTracking=mode  JVM options
                        where mode is on of "off", "summary" or "detail", the default
                        is "summary" If not set to "off" also add -XX:+PrintNMTStatistics
                      type: string
                    onOutOfMemory:
                      description: Configure the JVM behaviour when an OutOfMemoryError
                        occurs.
                      properties:
                        exit:
                          description: If set to true the JVM will exit when an OOM
                            error occurs. Default is true
                          type: boolean
                        heapDump:
                          description: If set to true adds the -XX:+HeapDumpOnOutOfMemoryError
                            JVM option to cause a heap dump to be created when an
                            OOM error occurs. Default is true
                          type: boolean
                      type: object
                    stackSize:
                      description: StackSize is the stack sixe value to pass to the
                        JVM. The format should be the same as that used for Java's
                        -Xss JVM option. If not set the JVM defaults are used.
                      type: string
                  type: object
                useContainerLimits:
                  description: If set to true Adds the  -XX:+UseContainerSupport JVM
                    option to ensure that the JVM respects any container resource
                    limits. The default value is true
                  type: boolean
              type: object
            labels:
              additionalProperties:
                type: string
              description: 'The extra labels to add to the all of the Pods in this
                roles. Labels here will add to or override those defined for the cluster.
                More info: http://kubernetes.io/docs/user-guide/labels'
              type: object
            livenessProbe:
              description: 'The liveness probe config to be used for the Pods in this
                role. ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/'
              properties:
                exec:
                  description: One and only one of the following should be specified.
                    Exec specifies the action to take.
                  type: object
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered
                    failed after having succeeded.
                  format: int32
                  type: integer
                httpGet:
                  description: HTTPGet specifies the http request to perform.
                  type: object
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started
                    before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  format: int32
                  type: integer
                periodSeconds:
                  description: How often (in seconds) to perform the probe.
                  format: int32
                  type: integer
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered
                    successful after having failed.
                  format: int32
                  type: integer
                tcpSocket:
                  description: 'TCPSocket specifies an action involving a TCP port.
                    TCP hooks not yet supported TODO: implement a realistic TCP lifecycle
                    hook'
                  type: object
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out.
                    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  format: int32
                  type: integer
              type: object
            logging:
              description: Logging allows configuration of Coherence and java util
                logging.
              properties:
                configFile:
                  description: 'ConfigFile allows the location of the Java util logging
                    configuration file to be overridden.  If this value is not set
                    the logging.properties file embedded in this chart will be used.  If
                    this value is set the configuration will be located by trying
                    the following locations in order:    1. If store.logging.configMapName
                    is set then the config map will be mounted as a volume and the
                    logging         properties file will be located as a file location
                    relative to the ConfigMap volume mount point.    2. If userArtifacts.imageName
                    is set then using this value as a file name relative to the location
                    of the         configuration files directory in the user artifacts
                    image.    3. Using this value as an absolute file name.'
                  type: string
                configMapName:
                  description: ConfigMapName allows a config map to be mounted as
                    a volume containing the logging  configuration file to use.
                  type: string
                fluentd:
                  description: Configures whether Fluentd is enabled and the configuration
                    of the Fluentd side-car container
                  properties:
                    configFile:
                      description: The Fluentd configuration file configuring source
                        for application log.
                      type: string
                    enabled:
                      description: Controls whether or not log capture via a Fluentd
                        sidecar container to an EFK stack is enabled. If this flag
                        i set to true it is expected that the coherence-monitoring-config
                        secret exists in the namespace that the cluster is being deployed
                        to. This secret is either created by the Coherence Operator
                        Helm chart if it was installed with the correct parameters
                        or it should have already been created manually.
                      type: boolean
                    image:
                      description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images'
                      type: string
                    imagePullPolicy:
                      description: 'Image pull policy. One of Always, Never, IfNotPresent.
                        More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                      type: string
                    tag:
                      description: This value should be source.tag from fluentd.application.configFile.
                      type: string
                  type: object
              type: object
            nodeSelector:
              additionalProperties:
                type: string
              description: 'NodeSelector is the Node labels for pod assignment   ref:
                https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector'
              type: object
            ports:
              description: Ports specifies additional port mappings for the Pod and
                additional Services for those ports
              items:
                properties:
                  name:
                    description: Name specifies the name of th port.
                    type: string
                  port:
                    description: Port specifies the port used.
                    format: int32
                    type: integer
                  protocol:
                    description: Protocol for container port. Must be UDP or TCP.
                      Defaults to "TCP"
                    type: string
                  service:
                    description: Service specifies the service used to expose the
                      port.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations is free form yaml that will be added
                          to the service annotations
                        type: object
                      enabled:
                        description: Enabled controls whether to create the service
                          yaml or not
                        type: boolean
                      externalName:
                        description: externalName is the external reference that kubedns
                          or equivalent will return as a CNAME record for this service.
                          No proxying will be involved. Must be a valid RFC-1123 hostname
                          (https://tools.ietf.org/html/rfc1123) and requires Type
                          to be ExternalName.
                        type: string
                      externalTrafficPolicy:
                        description: externalTrafficPolicy denotes if this Service
                          desires to route external traffic to node-local or cluster-wide
                          endpoints. "Local" preserves the client source IP and avoids
                          a second hop for LoadBalancer and Nodeport type services,
                          but risks potentially imbalanced traffic spreading. "Cluster"
                          obscures the client source IP and may cause a second hop
                          to another node, but should have good overall load-spreading.
                        type: string
                      healthCheckNodePort:
                        description: healthCheckNodePort specifies the healthcheck
                          nodePort for the service. If not specified, HealthCheckNodePort
                          is created by the service api backend with the allocated
                          nodePort. Will use user-specified nodePort value if specified
                          by the client. Only effects when Type is set to LoadBalancer
                          and ExternalTrafficPolicy is set to Local.
                        format: int32
                        type: integer
                      labels:
                        additionalProperties:
                          type: string
                        description: 'The extra labels to add to the service. More
                          info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                      loadBalancerIP:
                        description: LoadBalancerIP is the IP address of the load
                          balancer
                        type: string
                      loadBalancerSourceRanges:
                        description: 'If specified and supported by the platform,
                          this will restrict traffic through the cloud-provider load-balancer
                          will be restricted to the specified client IPs. This field
                          will be ignored if the cloud-provider does not support the
                          feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                        items:
                          type: string
                        type: array
                      name:
                        description: An optional name to use to override the generated
                          service name.
                        type: string
                      port:
                        description: The service port value
                        format: int32
                        type: integer
                      publishNotReadyAddresses:
                        description: publishNotReadyAddresses, when set to true, indicates
                          that DNS implementations must publish the notReadyAddresses
                          of subsets for the Endpoints associated with the Service.
                          The default value is false. The primary use case for setting
                          this field is to use a StatefulSet's Headless Service to
                          propagate SRV records for its Pods without respect to their
                          readiness for purpose of peer discovery.
                        type: boolean
                      sessionAffinity:
                        description: 'Supports "ClientIP" and "None". Used to maintain
                          session affinity. Enable client IP based session affinity.
                          Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        type: string
                      sessionAffinityConfig:
                        description: sessionAffinityConfig contains the configurations
                          of session affinity.
                        type: object
                      type:
                        description: Type is the K8s service type (typically ClusterIP
                          or LoadBalancer) The default is "ClusterIP".
                        type: string
                    type: object
                type: object
              type: array
            readinessProbe:
              description: 'The readiness probe config to be used for the Pods in
                this role. ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/'
              properties:
                exec:
                  description: One and only one of the following should be specified.
                    Exec specifies the action to take.
                  type: object
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered
                    failed after having succeeded.
                  format: int32
                  type: integer
                httpGet:
                  description: HTTPGet specifies the http request to perform.
                  type: object
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started
                    before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  format: int32
                  type: integer
                periodSeconds:
                  description: How often (in seconds) to perform the probe.
                  format: int32
                  type: integer
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered
                    successful after having failed.
                  format: int32
                  type: integer
                tcpSocket:
                  description: 'TCPSocket specifies an action involving a TCP port.
                    TCP hooks not yet supported TODO: implement a realistic TCP lifecycle
                    hook'
                  type: object
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out.
                    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  format: int32
                  type: integer
              type: object
            replicas:
              description: The desired number of cluster members of this role. This
                is a pointer to distinguish between explicit zero and not specified.
                Default value is 3.
              format: int32
              type: integer
            resources:
              description: 'Resources is the optional resource requests and limits
                for the containers  ref: http://kubernetes.io/docs/user-guide/compute-resources/  By
                default the cpu requests is set to zero and the cpu limit set to 32.
                This is because it appears that K8s defaults cpu to one and since
                Java 10 the JVM now correctly picks up cgroup cpu limits then the
                JVM will only see one cpu. By setting resources.requests.cpu=0 and
                resources.limits.cpu=32 it ensures that the JVM will see the either
                the number of cpus on the host if this is <= 32 or the JVM will see
                32 cpus if the host has > 32 cpus. The limit is set to zero so that
                there is no hard-limit applied.  No default memory limits are applied.'
              type: object
            role:
              description: The name of this role. This value will be used to set the
                Coherence role property for all members of this role
              type: string
            scaling:
              description: The configuration to control safe scaling.
              properties:
                policy:
                  description: ScalingPolicy describes how the replicas of the cluster
                    role will be scaled. The default if not specified is based upon
                    the value of the StorageEnabled field. If StorageEnabled field
                    is not specified or is true the default scaling will be safe,
                    if StorageEnabled is set to false the default scaling will be
                    parallel.
                  type: string
                probe:
                  description: The probe to use to determine whether a role is Status
                    HA. If not set the default handler will be used. In most use-cases
                    the default handler would suffice but in advanced use-cases where
                    the application code has a different concept of Status HA to just
                    checking Coherence services then a different handler may be specified.
                  properties:
                    exec:
                      description: One and only one of the following should be specified.
                        Exec specifies the action to take.
                      type: object
                    httpGet:
                      description: HTTPGet specifies the http request to perform.
                      type: object
                    tcpSocket:
                      description: 'TCPSocket specifies an action involving a TCP
                        port. TCP hooks not yet supported TODO: implement a realistic
                        TCP lifecycle hook'
                      type: object
                    timeoutSeconds:
                      description: Number of seconds after which the handler times
                        out (only applies to http and tcp handlers). Defaults to 1
                        second. Minimum value is 1.
                      format: int64
                      type: integer
                  type: object
              type: object
            tolerations:
              description: 'Tolerations is for nodes that have taints on them.   Useful
                if you want to dedicate nodes to just run the coherence container
                For example:   tolerations:   - key: "key"     operator: "Equal"     value:
                "value"     effect: "NoSchedule"    ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/'
              items:
                type: object
              type: array
            volumeClaimTemplates:
              description: VolumeClaimTemplates defines extra PVC mappings that will
                be added to the Coherence Pod.   The content of this yaml should match
                the normal k8s volumeClaimTemplates section of a Pod definition   as
                described in https://kubernetes.io/docs/concepts/storage/persistent-volumes/
              items:
                type: object
              type: array
            volumeMounts:
              description: VolumeMounts defines extra volume mounts to map to the
                additional volumes or PVCs declared above   in store.volumes and store.volumeClaimTemplates
              items:
                type: object
              type: array
            volumes:
              description: Volumes defines extra volume mappings that will be added
                to the Coherence Pod.   The content of this yaml should match the
                normal k8s volumes section of a Pod definition   as described in https://kubernetes.io/docs/concepts/storage/volumes/
              items:
                type: object
              type: array
          type: object
        status:
          properties:
            clusterName:
              description: The name of the cluster.
              type: string
            currentReplicas:
              description: CurrentReplicas is the current size of the Coherence cluster.
              format: int32
              type: integer
            readyReplicas:
              description: ReadyReplicas is the number of Pods created by the StatefulSet.
              format: int32
              type: integer
            replicas:
              description: Replicas is the desired size of the Coherence cluster.
              format: int32
              type: integer
            selector:
              description: 'label query over pods that should match the replicas count.
                This is same as the label selector but in the string format to avoid
                introspection by clients. The string will be in the same format as
                the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
              type: string
            status:
              description: The current status.
              type: string
          required:
          - replicas
          - currentReplicas
          - readyReplicas
          type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
