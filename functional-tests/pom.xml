<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
    Licensed under the Universal Permissive License v 1.0 as shown at
    http://oss.oracle.com/licenses/upl.

-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.oracle.coherence.kubernetes</groupId>
    <artifactId>operator-parent</artifactId>
    <version>1.1.0-SNAPSHOT</version>
  </parent>

  <artifactId>coherence-operator-tests</artifactId>

  <description>Oracle Coherence Kubernetes Operator Tests</description>
  <name>coherence-operator-tests</name>

  <properties>
    <ci.build>${env.CI_BUILD_ID}</ci.build>
    <!-- Set the namespace from the CI build id to ensure tests use a unique namespace -->
    <k8s.namespace>test-cop-${ci.build}</k8s.namespace>
    <!-- Set the target namespaces for coherence -->
    <k8s.target.namespaces>test-cop-${ci.build},test-cop2-${ci.build}</k8s.target.namespaces>
    <!-- the k8s configuration file to use (default to ~/.kube/config) -->
    <k8s.config/>
    <!-- the k8s context to use (defaults to the current context) -->
    <k8s.context/>
    <!-- the k8s docker-registry secret name continuing the image pull credentials -->
    <k8s.image.pull.secret/>
    <!--&lt;!&ndash; flag indicating whether to create the pull secrets &ndash;&gt;-->
    <k8s.create.secret>false</k8s.create.secret>
    <!-- the username to use when creating pull secrets -->
    <k8s.secret.user/>
    <!-- the email to use when creating pull secrets -->
    <k8s.secret.email/>
    <!-- the location of the Kubernetes CLI (default to /usr/local/bin/kubectl in Bedrock) -->
    <k8s.kubectl/>
    <!-- the credentials (wcr token) to use when creating pull secrets -->
    <k8s.secret.credentials/>
    <!-- flag indicating whether to create and destroy the k8s namespace used for testing -->
    <k8s.create.namespace>true</k8s.create.namespace>
    <!-- minimiun port used for k8s port forward, note that by default k8s uses 30000-32767 for node port -->
    <k8s.min.forward.port>40000</k8s.min.forward.port>
    <!-- the timeout for Helm commands (in seconds) -->
    <helm.timeout>300</helm.timeout>
    <!-- location of the Helm config (default "~/.helm") -->
    <helm.home/>
    <!-- the address of Tiller. -->
    <helm.tiller.host/>
    <!-- The k8s namespace that Tiller is running in -->
    <helm.tiller.namespace/>
    <!-- the name of the Helm chart package containing the chart to test -->
    <operator.helm.chart.package>../operator/target/coherence-operator-${project.version}-helm.tar.gz</operator.helm.chart.package>
    <!-- the name of the Operator Helm chart to test -->
    <operator.helm.chart.name>coherence-operator</operator.helm.chart.name>
    <!-- the name of the Helm chart package containing the chart to test -->
    <coherence.helm.chart.package>../operator/target/coherence-${project.version}-helm.tar.gz</coherence.helm.chart.package>
    <!-- the name of the Coherence Helm chart to test -->
    <coherence.helm.chart.name>coherence</coherence.helm.chart.name>
    <!-- the location of the Helm CLI (default to /usr/local/bin/helm) -->
    <bedrock.helm>/usr/local/bin/helm</bedrock.helm>
    <!-- the image pull policy for Coherence Operator -->
    <op.image.pull.policy/>
    <user.artifacts.image>${test.image.prefix}user-artifacts</user.artifacts.image>
    <user.artifacts.image.v1>1.0</user.artifacts.image.v1>
    <user.artifacts.image.v2>2.0</user.artifacts.image.v2>
    <user.test.image>${test.image.prefix}coh-client</user.test.image>
    <user.test.image.version>2.0</user.test.image.version>
    <user.fluentd.image>${test.image.prefix}fluentd</user.fluentd.image>
    <user.fluentd.image.version>2.0</user.fluentd.image.version>
    <javax.ws.rs.version>2.0.1</javax.ws.rs.version>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.oracle.coherence</groupId>
      <artifactId>coherence</artifactId>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-json-jackson</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>javax.ws.rs</groupId>
      <artifactId>javax.ws.rs-api</artifactId>
      <version>${javax.ws.rs.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.glassfish.external</groupId>
      <artifactId>opendmk_jmxremote_optional_jar</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.oracle.bedrock</groupId>
      <artifactId>bedrock-runtime-docker</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.oracle.bedrock</groupId>
      <artifactId>bedrock-runtime-k8s</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-compress</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.oracle.coherence</groupId>
      <artifactId>coherence-rest</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-client</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.sun.activation</groupId>
      <artifactId>javax.activation</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.coherence.kubernetes</groupId>
      <artifactId>coherence-utils</artifactId>
      <version>1.1.0-SNAPSHOT</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <testResources>
      <!-- process test resources without filtering except values/*.yaml -->
      <testResource>
        <directory>${project.basedir}/src/test/resources</directory>
        <excludes>
          <exclude>values/*.yaml</exclude>
        </excludes>
        <filtering>false</filtering>
      </testResource>
      <!-- process values/*.yaml test resources with filtering -->
      <testResource>
        <directory>${project.basedir}/src/test/resources</directory>
        <includes>
          <include>values/*.yaml</include>
        </includes>
        <filtering>true</filtering>
      </testResource>
    </testResources>

    <!-- Use the assembly plugin to pull together the files to use to build the
         docker image under the target/docker folder -->
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>docker</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <finalName>docker</finalName>
              <appendAssemblyId>false</appendAssemblyId>
              <descriptors>
                <descriptor>src/assembly/image-assembly.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <!-- The Helm testing profile -->
      <id>helm-test</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <!-- Build the custom artifacts v1 Docker image -->
              <execution>
                <id>docker-build-v1</id>
                <phase>package</phase>
                <configuration>
                  <executable>docker</executable>
                  <workingDirectory>${project.build.directory}/docker</workingDirectory>
                  <arguments>
                    <argument>build</argument>
                    <argument>-f</argument>
                    <argument>Artifacts.Dockerfile</argument>
                    <argument>--build-arg</argument>
                    <argument>VERSION=v1</argument>
                    <argument>-t</argument>
                    <argument>${user.artifacts.image}:${user.artifacts.image.v1}</argument>
                    <argument>.</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
              <!-- Build the custom artifacts v2 Docker image -->
              <execution>
                <id>docker-build-v2</id>
                <phase>package</phase>
                <configuration>
                  <executable>docker</executable>
                  <workingDirectory>${project.build.directory}/docker</workingDirectory>
                  <arguments>
                    <argument>build</argument>
                    <argument>-f</argument>
                    <argument>Artifacts.Dockerfile</argument>
                    <argument>--build-arg</argument>
                    <argument>VERSION=v2</argument>
                    <argument>-t</argument>
                    <argument>${user.artifacts.image}:${user.artifacts.image.v2}</argument>
                    <argument>.</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
              <!-- Build the test client Docker image -->
              <execution>
                <id>docker-build-client</id>
                <phase>package</phase>
                <configuration>
                  <executable>docker</executable>
                  <workingDirectory>${project.build.directory}/docker</workingDirectory>
                  <arguments>
                    <argument>build</argument>
                    <argument>-f</argument>
                    <argument>Client.Dockerfile</argument>
                    <argument>-t</argument>
                    <argument>${user.test.image}:${user.test.image.version}</argument>
                    <argument>.</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <encoding>UTF-8</encoding>
              <failIfNoTests>false</failIfNoTests>
              <useSystemClassLoader>true</useSystemClassLoader>
              <useManifestOnlyJar>false</useManifestOnlyJar>
              <systemProperties>
                <k8s.namespace>${k8s.namespace}</k8s.namespace>
                <k8s.target.namespaces>${k8s.target.namespaces}</k8s.target.namespaces>
                <k8s.config>${k8s.config}</k8s.config>
                <k8s.context>${k8s.context}</k8s.context>
                <k8s.image.pull.secret>${k8s.image.pull.secret}</k8s.image.pull.secret>
                <k8s.create.namespace>${k8s.create.namespace}</k8s.create.namespace>
                <k8s.create.secret>${k8s.create.secret}</k8s.create.secret>
                <k8s.kubectl>${k8s.kubectl}</k8s.kubectl>
                <k8s.secret.user>${k8s.secret.user}</k8s.secret.user>
                <k8s.secret.credentials>${k8s.secret.credentials}</k8s.secret.credentials>
                <k8s.secret.email>${k8s.secret.email}</k8s.secret.email>
                <k8s.min.forward.port>${k8s.min.forward.port}</k8s.min.forward.port>
                <helm.timeout>${helm.timeout}</helm.timeout>
                <helm.home>${helm.home}</helm.home>
                <helm.tiller.host>${helm.tiller.host}</helm.tiller.host>
                <helm.tiller.namespace>${helm.tiller.namespace}</helm.tiller.namespace>
                <operator.helm.chart.package>${operator.helm.chart.package}</operator.helm.chart.package>
                <operator.helm.chart.name>${operator.helm.chart.name}</operator.helm.chart.name>
                <coherence.helm.chart.package>${coherence.helm.chart.package}</coherence.helm.chart.package>
                <coherence.helm.chart.name>${coherence.helm.chart.name}</coherence.helm.chart.name>
                <bedrock.helm>${bedrock.helm}</bedrock.helm>
                <op.image.pull.policy>${op.image.pull.policy}</op.image.pull.policy>
                <project.build.directory>${project.build.directory}</project.build.directory>
                <docker.repo>${test.image.prefix}</docker.repo>
                <test.image.prefix>${test.image.prefix}</test.image.prefix>
                <coherence.docker.version>${coherence.docker.version}</coherence.docker.version>
                <test.image.prefix>${test.image.prefix}</test.image.prefix>
                
                <http.proxyHost>${proxyHost}</http.proxyHost>
                <http.proxyPort>${proxyPort}</http.proxyPort>
                <http.nonProxyHosts>${nonProxyHosts}</http.nonProxyHosts>
                <https.proxyHost>${proxyHost}</https.proxyHost>
                <https.proxyPort>${proxyPort}</https.proxyPort>
                <https.nonProxyHosts>${nonProxyHosts}</https.nonProxyHosts>
              </systemProperties>
              <includes>
                <include>/helm/**/*IT.java</include>
                <include>/custom/**/*IT.java</include>
              </includes>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- This profile will push the Docker images built by this module to the registry.
         This is required when building against a k8s cluster that cannot see the local
         registry on the build machine. -->
    <profile>
      <id>pushTestImage</id>
      <build>
        <plugins>
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>push-user-artifacts-image-v1</id>
                <phase>pre-integration-test</phase>
                <configuration>
                  <executable>docker</executable>
                  <workingDirectory>${project.build.directory}/docker</workingDirectory>
                  <arguments>
                    <argument>push</argument>
                    <argument>${user.artifacts.image}:${user.artifacts.image.v1}</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
              <execution>
                <id>push-user-artifacts-image-v2</id>
                <phase>pre-integration-test</phase>
                <configuration>
                  <executable>docker</executable>
                  <workingDirectory>${project.build.directory}/docker</workingDirectory>
                  <arguments>
                    <argument>push</argument>
                    <argument>${user.artifacts.image}:${user.artifacts.image.v2}</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
              <execution>
                <id>push-user-test-image</id>
                <phase>pre-integration-test</phase>
                <configuration>
                  <executable>docker</executable>
                  <workingDirectory>${project.build.directory}/docker</workingDirectory>
                  <arguments>
                    <argument>push</argument>
                    <argument>${user.test.image}:${user.test.image.version}</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
