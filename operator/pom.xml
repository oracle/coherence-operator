<?xml version="1.0" encoding="UTF-8"?>

<!--

    Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
    Licensed under the Universal Permissive License v 1.0 as shown at
    http://oss.oracle.com/licenses/upl.

-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.oracle.coherence.kubernetes</groupId>
    <artifactId>operator-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>coherence-operator</artifactId>

  <description>Oracle Coherence Kubernetes Operator</description>
  <name>coherence-operator</name>

  <properties>
    <!-- version below must one specified in requirements.yaml -->
    <prometheus.operator.helmchart.version>1.5.2</prometheus.operator.helmchart.version>

    <!-- operator image  -->
    <operator.image>${release.image.prefix}oracle/${project.artifactId}</operator.image>
    <operator.image.pullPolicy>Always</operator.image.pullPolicy>
    <operator.image.version>${project.version}</operator.image.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.kubernetes</groupId>
      <artifactId>client-java</artifactId>
    </dependency>

    <!-- test dependencies -->
    <dependency>
      <groupId>com.oracle.bedrock</groupId>
      <artifactId>bedrock-runtime</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <!-- maven-resources-plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven.resource.plugin.version}</version>
      </plugin>

      <!-- maven-assembly-plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>helm-coherence</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <finalName>coherence-${project.version}</finalName>
              <attach>false</attach>
              <descriptors>
                <descriptor>src/assembly/coherence-helm-assembly.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>helm-operator</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <appendAssemblyId>true</appendAssemblyId>
              <attach>false</attach>
              <descriptors>
                <descriptor>src/assembly/operator-helm-assembly.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>docker</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <property>
          <name>project.docker</name>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- The assembly-plugin is used to assemble and filter all of the
               scripts and files into the Docker build folder -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
            <executions>
              <execution>
                <id>docker-image-assembly</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
                <configuration>
                  <finalName>docker</finalName>
                  <appendAssemblyId>false</appendAssemblyId>
                  <descriptors>
                    <descriptor>src/assembly/image-assembly.xml</descriptor>
                  </descriptors>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>docker-dependencies</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/docker/lib</outputDirectory>
                  <overWriteReleases>true</overWriteReleases>
                  <overWriteSnapshots>true</overWriteSnapshots>
                  <overWriteIfNewer>true</overWriteIfNewer>
                  <!-- We only need the runtime dependencies - not test dependencies -->
                  <includeScope>compile</includeScope>
                  <excludeScope>test</excludeScope>
                </configuration>
              </execution>
              <execution>
                <id>copy-operator-artifact</id>
                <phase>package</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>${project.groupId}</groupId>
                      <artifactId>${project.artifactId}</artifactId>
                      <version>${project.version}</version>
                      <type>${project.packaging}</type>
                    </artifactItem>
                  </artifactItems>
                  <outputDirectory>${project.build.directory}/docker/lib</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>docker-build</id>
                <phase>package</phase>
                <configuration>
                  <executable>docker</executable>
                  <workingDirectory>${project.build.directory}/docker</workingDirectory>
                  <arguments>
                    <argument>build</argument>
                    <argument>-t</argument>
                    <argument>${operator.image}:${operator.image.version}</argument>
                    <argument>--no-cache</argument>
                    <argument>.</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>dockerPush</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <dockerActivated>true</dockerActivated>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>docker-push-explicit-version</id>
                <phase>install</phase>
                <configuration>
                  <executable>docker</executable>
                  <workingDirectory>${project.build.directory}/docker</workingDirectory>
                  <arguments>
                    <argument>push</argument>
                    <argument>${operator.image}:${operator.image.version}</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
