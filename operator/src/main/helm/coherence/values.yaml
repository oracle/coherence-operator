# Copyright 2019, Oracle Corporation and/or its affiliates.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at
# http://oss.oracle.com/licenses/upl.

# clusterSize is the initial size of the Coherence cluster. If not set the default cluster size is 3.
clusterSize:

# imagePullSecrets provides support pulling images from private registries, the value references
#   one or more secrets to be used when pulling images. Secrets must be manually created in the
#   target namespace.
#   ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#
#   For example, adding the pull secret "foo" would be:
#
#   imagePullSecrets:
#   - "foo"
#
#   adding multiple pull secrets "foo" and "bar" would be
#
#   imagePullSecrets:
#   - "foo"
#   - "bar"
#
#   If specifying pull secrets on the command line with --set there are two choices depending on whether
#   there is a single pull secret or multiple pull secrets. A single secret can be specified as a simple string:
#
#   --set imagePullSecrets=foo
#
#   Multiple pull secrets must be specified as a list, which Helm expects to be contained in curly braces:
#
#   --set "imagePullSecrets={foo,bar}"
#
imagePullSecrets: []

# The role name of a Coherence cluster member. Default role is "CoherenceServer"
role:

# The cluster name of a Coherence cluster member.
# If not set the cluster name will default to the Helm release name
cluster:

# serviceAccountName is the name to use for the service account to use when RBAC is enabled
#   The role bindings must already have been created as this chart does not create them it just
#   sets the serviceAccountName value in the Pod spec.
serviceAccountName:

# ---------------------------------------------------------------------------
# store specifies values controlling the coherence container
store:
  # store.cacheConfig is the name of the cache configuration file to use
  cacheConfig:

  # store.pof is the configuration values for POF
  pof:
    # store.pof.config specifies the name of the POF configuration file to use when using POF serializer.
    config: pof-config.xml

  # store.storageEnabled is true to run Coherence containers as storage enabled cluster members
  #   or false to run storage disabled cluster members
  storageEnabled:

  # store.overrideConfig is name of the Coherence operational configuration override file,
  #   the default is tangosol-coherence-override.xml
  overrideConfig:

  # store.logging allows configuration of Coherence and java util logging.
  logging:
    # store.logging.level sets the Coherence log level. This value should be an integer in the range 1 to 9,
    #   the default being 5 (info level).
    level:
    # store.logging.configFile allows the location of the Java util logging configuration file to be overridden.
    #   If this value is not set the logging.properties file embedded in this chart will be used.
    #   If this value is set the configuration will be located by trying the following locations in order:
    #     1. If store.logging.configMapName is set then the config map will be mounted as a volume and the logging
    #          properties file will be located as a file location relative to the ConfigMap volume mount point.
    #     2. If userArtifacts.imageName is set then using this value as a file name relative to the location of the
    #          configuration files directory in the user artifacts image.
    #     3. Using this value as an absolute file name.
    #
    configFile:
    # store.logging.configMapName allows a config map to be mounted as a volume containing the logging
    #   configuration file to use.
    configMapName:

  # store.maxHeap is the min/max heap value to pass to the JVM.
  #   The format should be the same as that used for Java's -Xms and -Xmx JVM options.
  #   If not set the JVM defaults are used.
  maxHeap:

  # store.jvmArgs specifies the options to pass to the Coherence JVM. The default is
  #   to use the G1 collector.
  jvmArgs: "-XX:+UseG1GC"

  # store.javaOpts is miscellaneous JVM options to pass to the Coherence store container
  # This options will override the system options computed in the start up script.
  javaOpts:

  # store.wkaRelease is used to override the default WKA address using the WKA value from an existing Helm install
  #   so that the Pods from both installs form a single Coherence cluster.
  #
  #   By default the WKA address is the address of the headless service created as part of
  #   the install, which will map to the addresses of all of the installed Pods. By overriding
  #   the WKA address it is possible to form a cluster from multiple Helm installs.
  #   Typically the storage members would be started with an initial Helm install with a given name.
  #   Then one or more storage disabled installs can be run setting store.storageEnabled=false
  #   and setting store.wkaRelease to the value of the storage member's Helm install name so that those
  #   subsequent installs join the initial install's Coherence cluster.
  #
  #   For example:
  #   1. Storage members using a cluster name of "foo" Helm release name of "bar"
  #
  #   helm install --set cluster=foo --name=bar <chart-name>
  #
  #   2. Storage disabled members using the same cluster name of "foo" and setting the wkaRelease
  #      value to the storage members Helm release name "bar"
  #
  #   helm install --set cluster=foo --set store.wkaRelease=bar --set store.storageEnabled=false <chart-name>
  #
  wkaRelease:

  # store.wka is used to override the default WKA address.
  #   By default the WKA address is the address of the headless service created as part of
  #   the install, which will map to the addresses of ll of the installed Pods. By overriding
  #   the WKA address it is possible to form a cluster from multiple Helm installs.
  #
  #   This override would typically map to the name of an existing headless service configured with
  #   selectors so that it matches on all of the Pods that will be part of the Coherence cluster.
  wka:

  # store.ports is additional port mappings that will be added to the Pod
  #   To specify extra ports add them as port name value pairs the same as they
  #   would be added to a Pod containers spec, for example these
  #   values:
  #
  #   ports:
  #     my-http-port: 8080
  #     my-other-port: 1234
  #
  #   will add the port mappings to the Pod and Service for ports 8080 and 1234
  ports:

  # store.env is additional environment variable mappings that will be passed to
  #   the Coherence container in the Pod
  #   To specify extra variables add them as name value pairs the same as they
  #   would be added to a Pod containers spec, for example these values:
  #
  #   env:
  #     FOO: "foo-value"
  #     BAR: "bar-value"
  #
  #   will add the environment variable mappings FOO="foo-value" and BAR="bar-value"
  env:

  # store.annotations are free-form yaml that will be added to the store release as annotations
  #  Any annotations should be placed BELOW this annotations: key. For example if we wanted to
  #  include annotations for Prometheus it would look like this:
  #
  #    annotations:
  #      prometheus.io/scrape: "true"
  #      prometheus.io/port: "2408"
  #
  annotations:

  # store.labels are extra labels to add to the Coherence Pod
  labels: []

  # store.podManagementPolicy sets the podManagementPolicy value for the
  #   Coherence cluster StatefulSet.  The default value is Parallel, to
  #   cause Pods to be started and stopped in parallel, which can be
  #   useful for faster cluster start-up in certain scenarios such as
  #   testing but could cause data loss if multiple Pods are stopped in
  #   parallel.  This can be changed to OrderedReady which causes Pods
  #   to start and stop in sequence.
  podManagementPolicy: Parallel

  # store.revisionHistoryLimit is the number of deployment revision K8s keeps after rolling upgrades.
  #   The default value if not set is 3.
  revisionHistoryLimit: 3

  # -------------------------------------------------------------------------
  # store.persistence values configure the on-disc data persistence settings
  persistence:
    # store.persistence.enabled enables or disabled on disc persistence of data
    enabled: false

    # store.persistence.size The size of the PersistentVolume to allocate to each Pod
    # in the StatefulSet. For production servers this number should likely be much larger.
    size: "2Gi"

    # store.persistence.storageClass is the Persistent Volume Storage Class
    # If defined the PVC storageClassName is set to the defined name
    # If set to "-" the PVC storageClassName is set to "", which disables
    #   dynamic provisioning
    # If undefined (the default) or set to null, no storageClassName spec is
    #   set, choosing the default provisioner.  (gp2 on AWS, standard on
    #   GKE, AWS & OpenStack)
    storageClass:

    # store.persistence.dataSource is the dataSource attribute to use in the persistence PVC spec
    #   see: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#persistentvolumeclaim-v1-core
    dataSource:

    # store.persistence.volumeMode is the volumeMode attribute to use in the persistence PVC spec
    #   see: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#persistentvolumeclaim-v1-core
    volumeMode:

    # store.persistence.volumeName is the volumeName attribute to use in the persistence PVC spec
    #   see: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#persistentvolumeclaim-v1-core
    volumeName:

    # store.persistence.selector is the yaml to add to the selector section of the persistence PVC spec
    #   see: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#persistentvolumeclaim-v1-core
    #   see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    #
    #   For example, if a PersistentVolume already exists with the label coherenceCluster: "foo" then
    #   a selector can be added to make the Pod use that PV like this:
    #
    #   selector:
    #     matchLabels:
    #       coherenceCluster: "foo"
    #
    selector:

    # store.persistence.volume allows the configuration of a normal k8s volume mapping
    #   for persistence data instead of a persistent volume claim. If a value is defined
    #   for store.persistence.volume then no PVC will be created and persistence data
    #   will instead be written to this volume. If is up to the deployer to understand
    #   the consequences of this and how the guarantees given when using PVCs differ
    #   to the storage guarantees for the particular volume type configured here.
    #   The yaml from below will be used as-is to configure the volume.
    volume:

  # -------------------------------------------------------------------------
  # store.persistence values configure the on-disc persistence data snapshot (backup) settings
  snapshot:
    # store.snapshot.enabled enables or disabled a different location for
    #   persistence snapshot data. If set to false then snapshot files will be written
    #   to the same volume configured for persistence data in the store.persistence section.
    enabled: false

    # store.snapshot.size The size of the PersistentVolume to allocate to each Pod
    # in the StatefulSet. For production servers this number should likely be much larger.
    size: "2Gi"

    # store.snapshot.storageClass is the Persistent Volume Storage Class
    #   If defined the PVC storageClassName is set to the defined name
    #   If set to "-" the PVC storageClassName is set to "", which disables
    #     dynamic provisioning
    #   If undefined (the default) or set to null, no storageClassName spec is
    #     set, choosing the default provisioner.  (gp2 on AWS, standard on
    #     GKE, AWS & OpenStack)
    storageClass:

    # store.snapshot.dataSource is the dataSource attribute to use in the snapshot PVC spec
    #   see: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#persistentvolumeclaim-v1-core
    dataSource:

    # store.snapshot.volumeMode is the volumeMode attribute to use in the snapshot PVC spec
    #   see: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#persistentvolumeclaim-v1-core
    volumeMode:

    # store.snapshot.volumeName is the volumeName attribute to use in the snapshot PVC spec
    #   see: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#persistentvolumeclaim-v1-core
    volumeName:

    # store.snapshot.selector is the yaml to add to the selector section of the persistence PVC spec
    #   see: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#persistentvolumeclaim-v1-core
    #   see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    #
    #   For example, if a PersistentVolume already exists with the label coherenceCluster: "foo" then
    #   a selector can be added to make the Pod use that PV like this:
    #
    #   selector:
    #     matchLabels:
    #       coherenceCluster: "foo"
    #
    selector:

    # store.snapshot.volume allows the configuration of a normal k8s volume mapping
    #   for persistence snapshot data instead of a persistent volume claim. If a value is defined
    #   for store.snapshot.volume then no PVC will be created and persistence data
    #   will instead be written to this volume. If is up to the deployer to understand
    #   the consequences of this and how the guarantees given when using PVCs differ
    #   to the storage guarantees for the particular volume type configured here.
    #   The yaml from below will be used as-is to configure the volume.
    volume:

  # store.management configures Coherence management over ReST
  #   Note: Coherence management over ReST will be available in 12.2.1.4.
  management:
    port:
    # store.management.ssl configures SSL settings for the Coherence management over ReST
    ssl:
      # store.management.ssl.enabled enables or disables SSL on the Coherence management over ReST endpoint,
      #   the default is false (disabled).
      enabled:
      # store.management.ssl.secrets is the name of the k8s secrets containing the Java key stores and password files.
      #   This value MUST be provided if SSL is enabled on the Coherence management over ReST endpoint.
      secrets:
      # store.management.ssl.keystore is the name of the Java key store file in the k8s secret to use as the SSL keystore
      #   when configuring management over ReST to use SSL.
      keyStore:
      # store.management.ssl.keyStorePasswordFile is the name of the file in the k8s secret containing the keystore
      #   password when configuring management over ReST to use SSL.
      keyStorePasswordFile:
      # store.management.ssl.keyStorePasswordFile is the name of the file in the k8s secret containing the key
      #   password when configuring management over ReST to use SSL.
      keyPasswordFile:
      # store.management.ssl.keyStoreAlgorithm is the name of the keystore algorithm for the keystore in the k8s secret
      #   used when configuring management over ReST to use SSL. If not set the default is SunX509
      keyStoreAlgorithm:
      # store.management.ssl.keyStoreProvider is the name of the keystore provider for the keystore in the k8s secret
      #   used when configuring management over ReST to use SSL.
      keyStoreProvider:
      # store.management.ssl.keyStoreType is the name of the Java keystore type for the keystore in the k8s secret used
      #   when configuring management over ReST to use SSL. If not set the default is JKS.
      keyStoreType:
      # store.management.ssl.trustStore is the name of the Java trust store file in the k8s secret to use as the SSL
      #   trust store when configuring management over ReST to use SSL.
      trustStore:
      # store.management.ssl.trustStorePasswordFile is the name of the file in the k8s secret containing the trust store
      #   password when configuring management over ReST to use SSL.
      trustStorePasswordFile:
      # store.management.ssl.trustStoreAlgorithm is the name of the keystore algorithm for the trust store in the k8s
      #   secret used when configuring management over ReST to use SSL.  If not set the default is SunX509.
      trustStoreAlgorithm:
      # store.management.ssl.trustStoreProvider is the name of the keystore provider for the trust store in the k8s
      #   secret used when configuring management over ReST to use SSL.
      trustStoreProvider:
      # store.management.ssl.trustStoreType is the name of the Java keystore type for the trust store in the k8s secret
      #   used when configuring management over ReST to use SSL. If not set the default is JKS.
      trustStoreType:
      # store.management.ssl.requireClientCert is a boolean flag indicating whether the client certificate will be
      #   authenticated by the server (two-way SSL) when configuring management over ReST to use SSL.
      #   If not set the default is false
      requireClientCert:

  # store.metrics configures Coherence metrics publishing
  #   Note: Coherence metrics publishing will be available in 12.2.1.4.
  metrics:
    port:
    # store.metrics.ssl configures SSL settings for the Coherence metrics endpoints
    ssl:
      # store.metrics.ssl.enabled enables or disables SSL on the Coherence metrics endpoint
      #   the default is false (disabled).
      #   When SSL is enabled, see: https://github.com/helm/charts/blob/master/stable/prometheus-operator/README.md
      #   on how to specify prometheus secrets for the certificates required for two-way SSL;
      #   see: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config
      #   on how to configure Prometheus SSL (TLS) connections.
      enabled:
      # store.metrics.ssl.secrets is the name of the k8s secrets containing the Java key stores and password files.
      #   This value MUST be provided if SSL is enabled for the Coherence metrics endpoint.
      secrets:
      # store.metrics.ssl.keystore is the name of the Java key store file in the k8s secret to use as the SSL keystore
      #   when configuring the metrics endpoint to use SSL.
      keyStore:
      # store.metrics.ssl.keyStorePasswordFile is the name of the file in the k8s secret containing the keystore
      #   password when configuring the metrics endpoint to use SSL.
      keyStorePasswordFile:
      # store.metrics.ssl.keyPasswordFile is the name of the file in the k8s secret containing the key
      #   password when configuring the metrics endpoint to use SSL.
      keyPasswordFile:
      # store.metrics.ssl.keyStoreAlgorithm is the name of the keystore algorithm for the keystore in the k8s secret
      #   used when configuring the metrics endpoint to use SSL. If not set the default is SunX509.
      keyStoreAlgorithm:
      # store.metrics.ssl.keyStoreProvider is the name of the keystore provider for the keystore in the k8s secret
      #   used when configuring the metrics endpoint to use SSL.
      keyStoreProvider:
      # store.metrics.ssl.keyStoreType is the name of the Java keystore type for the keystore in the k8s secret
      #   used when configuring the metrics endpoint to use SSL. If not set the default is JKS.
      keyStoreType:
      # store.metrics.ssl.trustStore is the name of the Java trust store file in the k8s secret to use as the SSL
      #   trust store when configuring the metrics endpoint to use SSL.
      trustStore:
      # store.metrics.ssl.trustStorePasswordFile is the name of the file in the k8s secret containing the trust store
      #   password when configuring the metrics endpoint to use SSL.
      trustStorePasswordFile:
      # store.metrics.ssl.trustStoreAlgorithm is the name of the keystore algorithm for the trust store in the k8s
      #   secret used when configuring the metrics endpoint to use SSL.  If not set the default is SunX509.
      trustStoreAlgorithm:
      # store.metrics.ssl.trustStoreProvider is the name of the keystore provider for the trust store in the k8s
      #   secret used when configuring the metrics endpoint to use SSL.
      trustStoreProvider:
      # store.metrics.ssl.trustStoreType is the name of the keystore type for the trust store in the k8s secret
      #   used when configuring the metrics endpoint to use SSL. If not set the default is JKS.
      trustStoreType:
      # store.metrics.ssl.requireClientCert is a boolean flag indicating whether the client certificate will be
      #   authenticated by the server (two-way SSL) when configuring the metrics endpoint to use SSL.
      #   If not set the default is false
      requireClientCert:

  # store.jmx defines the values used to enable and configure a separate set of cluster members
  #   that will act as MBean server members and expose a JMX port via a dedicated service.
  #   The JMX port exposed will be using the JMXMP transport as RMI does not work properly in containers.
  jmx:
    # store.jmx.enabled enables or disables running the MBean server nodes.
    #   If not set the default is false.
    enabled: false
    # store.jmx.replicas is the number of MBean server nodes to run.
    #   If not set the default is one.
    replicas:
    # store.jmx.maxHeap is the min/max heap value to pass to the MBean server JVM.
    #   The format should be the same as that used for Java's -Xms and -Xmx JVM options.
    #   If not set the JVM defaults are used.
    maxHeap:
    # store.jmx.service groups the values used to configure the JMX management service
    service:
      # store.jmx.service.enabled controls whether to create the service yaml or not
      enabled: true
      # store.jmx.service.type is the K8s service type (typically ClusterIP or LoadBalancer)
      type: "ClusterIP"
      # store.jmx.service.domain is the external domain name
      domain: "cluster.local"
      # store.jmx.service.loadBalancerIP is the IP address of the load balancer
      loadBalancerIP:
      # store.jmx.annotations is free form yaml that will be added to the service annotations
      annotations:
      # The JMX service port value, if not set defaults to 9099
      externalPort:

  # store.volumes defines extra volume mappings that will be added to the Coherence Pod.
  #   The content of this yaml should match the normal k8s volumes section of a Pod definition
  #   as described in https://kubernetes.io/docs/concepts/storage/volumes/
  volumes: []

  # store.volumeClaimTemplates defines extra PVC mappings that will be added to the Coherence Pod.
  #   The content of this yaml should match the normal k8s volumeClaimTemplates section of a Pod definition
  #   as described in https://kubernetes.io/docs/concepts/storage/persistent-volumes/
  volumeClaimTemplates: []

  # store.volumeMounts defines extra volume mounts to map to the additional volumes or PVCs declared above
  #   in store.volumes and store.volumeClaimTemplates
  volumeMounts: []

  # -------------------------------------------------------------------------
  # store.readinessProbe is the readiness probe config.
  #   ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  readinessProbe:
    # Number of seconds after the container has started before liveness or readiness probes are initiated.
    # If not set, the default initialDelaySeconds is 30.
    initialDelaySeconds:
    # How often (in seconds) to perform the probe. Minimum value is 1.
    # If not set, the default periodSeconds is 60.
    periodSeconds:
    # Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1.
    # If not set, the default timeoutSeconds is 5.
    timeoutSeconds:
    # Minimum consecutive successes for the probe to be considered successful after having failed.
    # Defaults to 1. Must be 1 for liveness. Minimum value is 1.
    successThreshold:
    # When a Pod starts and the probe fails, Kubernetes will try failureThreshold times
    # before giving up. Giving up in case of liveness probe means restarting the Pod.
    # In case of readiness probe the Pod will be marked Unready. Minimum value is 1.
    # If not set the default failureThreshold is 50.
    failureThreshold:

# ---------------------------------------------------------------------------
# Pod scheduling values

# affinity controls Pod scheduling preferences.
#   ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

# nodeSelector is the Node labels for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}

# tolerations is for nodes that have taints on them.
#   Useful if you want to dedicate nodes to just run the coherence container
#   For example:
#   tolerations:
#   - key: "key"
#     operator: "Equal"
#     value: "value"
#     effect: "NoSchedule"
#
#   ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# ---------------------------------------------------------------------------
# service groups the values used to configure the K8s service
service:
  # service.enabled controls whether to create the service yaml or not
  enabled: true
  # service.type is the K8s service type (typically ClusterIP or LoadBalancer)
  type: "ClusterIP"
  # service.domain is the external domain name
  domain: "cluster.local"
  # service.loadBalancerIP is the IP address of the load balancer
  loadBalancerIP:
  # annotations is free form yaml that will be added to the service annotations
  annotations:
  # The extend service port value
  # Default: 20000
  externalPort:
  # The management Http port as integer
  # Default: 30000
  managementHttpPort:
  # The metrics http port as integer
  # Default: 9095
  metricsHttpPort:

# ---------------------------------------------------------------------------
# resources is the optional resource requests and limits for the containers
# ref: http://kubernetes.io/docs/user-guide/compute-resources/
#
# By default the cpu requests is set to zero and the cpu limit set to 32. This
# is because it appears that K8s defaults cpu to one and since Java 10 the JVM
# now correctly picks up cgroup cpu limits then the JVM will only see one cpu.
# By setting resources.requests.cpu=0 and resources.limits.cpu=32 it ensures that
# the JVM will see the either the number of cpus on the host if this is <= 32 or
# the JVM will see 32 cpus if the host has > 32 cpus. The limit is set to zero
# so that there is no hard-limit applied.
#
# No default memory limits are applied.
resources:
  requests:
    cpu: 0
#    memory: 4Gi
  limits:
    cpu: 32
#    memory: 256Gi

# ---------------------------------------------------------------------------
# coherence groups the values used to configure the Coherence image used by the chart
coherence:
  # coherence.image is the name of the Coherence image to be used
  #   NOTE: This is a required value and if this value is set to null then installing the
  #   chart will result in a missing required value error
  image: "${helm.chart.coherence.image}"
  # coherence.imagePullPolicy controls the K8s Coherence container spec's pull policy
  # If not set the pull policy is "IfNotPresent".
  imagePullPolicy:

# ---------------------------------------------------------------------------
# coherenceUtils groups the values used to configure the Coherence utilities images used by the chart
#   Typically the utilities image settings would not require overriding.
coherenceUtils:
  # coherenceUtils.image is the name of the CoherenceUtils image to be used
  #   NOTE: This is a required value and if this value is set to null then installing the
  #   chart will result in a missing required value error
  image: "${operator.utils.image}"
  # coherenceUtils.imagePullPolicy controls the K8s Coherence utilities container spec's pull policy
  # If not set the pull policy is "IfNotPresent".
  imagePullPolicy:

# ---------------------------------------------------------------------------
# Controls whether or not log capture via EFK stack is enabled.
logCaptureEnabled: false

# Specify the fluentd image
# These parameters are ignored if 'logCaptureEnabled' is false.
fluentd:
  image: fluent/fluentd-kubernetes-daemonset:v1.3.3-debian-elasticsearch-1.3
  # imagePullPolicy controls the K8s container spec's pull policy
  # If not set the pull policy is "IfNotPresent".
  imagePullPolicy:
  # optional application logging configuration
  application:
    # fluentd configuration file configuring source for application log.
    configFile:
    # This value should be source.tag from fluentd.application.configFile.
    tag:

# ----------------------------------------------------------------------------
# userArtifacts configures how custom artifacts are added to the Coherence classpath
userArtifacts:
  # userArtifacts.image is the name of the Docker image containing the custom
  #   jar files and configuration files to add to the classpath
  image:
  # userArtifacts.imagePullPolicy is the image pull policy to use for the custom
  #   artifacts image. If not set the pull policy is "IfNotPresent".
  imagePullPolicy:
  # userArtifacts.libDir is the folder in the custom artifacts Docker image containing jar
  #   files to be added to the classpath of the Coherence container.
  #   If not set the libDir is "/files/lib".
  libDir:
  # userArtifacts.configDir is the folder in the custom artifacts Docker image containing
  #   configuration files to be added to the classpath of the Coherence container.
  #   If not set the configDir is "/files/conf".
  configDir:
