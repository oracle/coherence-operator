# Copyright (c) 2020, 2024, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at
# http://oss.oracle.com/licenses/upl.

# ---------------------------------------------------------------------------
# Coherence Operator GitHub Actions Release build.
# ---------------------------------------------------------------------------
name: Operator Release

on:
  release:
    types: [prereleased, released]

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: oracle-actions/setup-java@v1
      with:
        website: oracle.com
        release: 21

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23.x

    - name: Cache Go Modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-mods-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-mods-

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Start KinD Cluster
      shell: bash
      run: |
        make kind
        kubectl version
        kubectl get nodes
        docker pull gcr.io/distroless/java
        docker pull gcr.io/distroless/java11-debian11
        docker pull gcr.io/distroless/java17-debian11
        docker pull gcr.io/distroless/java17-debian12
        docker pull gcr.io/distroless/java21-debian12
        make get-tanzu

    - name: Release
      shell: bash
      run: |
        docker login ghcr.io/oracle/ --username ${{ secrets.IMAGE_REGISTRY_USER }} --password ${{ secrets.IMAGE_REGISTRY_TOKEN }}
        git config --local user.name "Github Action"
        git config --local user.email "$GITHUB_ACTOR@users.noreply.github.com"
        export NO_DAEMON=false
        make clean
        make all
        make trivy-scan
        if echo $GITHUB_EVENT_NAME -eq "release"; then PRE_RELEASE=false; else PRE_RELEASE=true; fi
        make release RELEASE_DRY_RUN=false PRE_RELEASE=$PRE_RELEASE

    - name: Upload Release Manifests
      id: upload-release-manifests
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: /tmp/coherence-operator/_output/coherence-operator-manifests.tar.gz
        asset_name: coherence-operator-manifests.tar.gz
        asset_content_type: application/tar+gzip

    - name: Upload Release Yaml
      id: upload-release-yaml
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: /tmp/coherence-operator/_output/coherence-operator.yaml
        asset_name: coherence-operator.yaml
        asset_content_type: text/plain

    - name: Upload Restricted Release Yaml
      id: upload-restricted-release-yaml
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: /tmp/coherence-operator/_output/coherence-operator-restricted.yaml
        asset_name: coherence-operator-restricted.yaml
        asset_content_type: text/plain

    - name: Upload Release CRD
      id: upload-release-crd
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: /tmp/coherence-operator/_output/manifests/crd/coherence.oracle.com_coherence.yaml
        asset_name: coherence.oracle.com_coherence.yaml
        asset_content_type: text/plain

    - name: Upload Release Small CRD
      id: upload-release-small-crd
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: /tmp/coherence-operator/_output/manifests/crd-small/coherence.oracle.com_coherence.yaml
        asset_name: coherence.oracle.com_coherence_small.yaml
        asset_content_type: text/plain

    - name: Upload Release Job CRD
      id: upload-release-job-crd
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: /tmp/coherence-operator/_output/manifests/crd/coherencejob.oracle.com_coherence.yaml
        asset_name: coherencejob.oracle.com_coherence.yaml
        asset_content_type: text/plain

    - name: Upload Release Small Job CRD
      id: upload-release-job-small-crd
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: /tmp/coherence-operator/_output/manifests/crd-small/coherencejob.oracle.com_coherence.yaml
        asset_name: coherencejob.oracle.com_coherence_small.yaml
        asset_content_type: text/plain

    - name: Upload Release Dashboards
      id: upload-release-dashboards
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: /tmp/coherence-operator/_output/coherence-dashboards.tar.gz
        asset_name: coherence-dashboards.tar.gz
        asset_content_type: application/tar+gzip

    - name: Upload Docs
      id: upload-docs
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: /tmp/coherence-operator/_output/docs.tar.gz
        asset_name: docs.tar.gz
        asset_content_type: application/tar+gzip
