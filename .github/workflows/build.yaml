# Copyright 2019, 2021 Oracle Corporation and/or its affiliates.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at
# http://oss.oracle.com/licenses/upl.

# ---------------------------------------------------------------------------
# Coherence Operator GitHub Actions CI build.
# ---------------------------------------------------------------------------
name: Operator CI

on:
  push:
    branches-ignore:
    - gh-pages
    - 1.0.0
    - 2.x
  pull_request:
    types:
      - opened
      - committed
    branches-ignore:
    - gh-pages
    - 1.0.0
    - 2.x

jobs:
  build:
    runs-on: ubuntu-latest

#   Checkout the source, we need a depth of zero to fetch all of the history otherwise
#   the copyright check cannot work out the date of the files from Git.
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

#   This step will free up disc space on the runner by removing
#   lots of things that we do not need.
    - name: disc
      shell: bash
      run: |
        echo "Listing 100 largest packages"
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
        df -h
        echo "Removing large packages"
        sudo apt-get remove -y '^ghc-8.*'
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get remove -y '^llvm-.*'
        sudo apt-get remove -y 'monodoc-http'
        sudo apt-get remove -y 'php.*'
        sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h
        echo "Removing large directories"
        rm -rf /usr/share/dotnet/
        df -h

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'

    - name: Cache Go Modules
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-mods-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-mods-

    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.x

    - name: Start KinD Cluster
#     Start a KinD K8s cluster with single worker node
      shell: bash
      run: |
        sh ./hack/kind.sh --image kindest/node:v1.18.8@sha256:f4bcc97a0ad6e7abaf3f643d890add7efe6ee4ab90baeb374b4f41a4c95567eb
        sh ./hack/kind-label-node.sh
        kubectl version
        kubectl get nodes
        docker pull gcr.io/distroless/java
        docker pull gcr.io/distroless/java:11

    - name: Code Review
      shell: bash
      run: |
        make code-review

    - name: Build
      shell: bash
      run: make all

    - name: Load Images to KinD
#     Load the images just built to the KinD cluster
      shell: bash
      run: |
        make kind-load

    - name: Unit Tests
      shell: bash
      run: make test-all

    - name: E2E Local Tests
      shell: bash
      run: make e2e-local-test

    - name: E2E Remote Tests
      shell: bash
      run: make e2e-test

    - name: E2E Elasticsearch Tests
      shell: bash
      run: |
        docker pull docker.elastic.co/elasticsearch/elasticsearch:7.6.2
        docker pull docker.elastic.co/kibana/kibana:7.6.2
        kind load docker-image --name operator docker.elastic.co/elasticsearch/elasticsearch:7.6.2
        kind load docker-image --name operator docker.elastic.co/kibana/kibana:7.6.2
        make e2e-elastic-test

    - name: E2E Prometheus Tests
      shell: bash
      run: |
        make e2e-prometheus-test

    - name: Helm Chart Tests
      shell: bash
      run: |
        make e2e-helm-test

    - name: Deploy Snapshots
      if: success()
      env:
        MAVEN_SONATYPE_USERNAME: ${{ secrets.MAVEN_SONATYPE_USERNAME }}
        MAVEN_SONATYPE_TOKEN: ${{ secrets.MAVEN_SONATYPE_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      shell: bash
      run: |
        sh ./hack/maven-gpg.sh
        make mvn-deploy GPG_PASSPHRASE=${GPG_PASSPHRASE}

    - name: Upload Manifests
      uses: actions/upload-artifact@v1
      if: success()
      with:
        name: coherence-operator-manifests.tar.gz
        path: build/_output/coherence-operator-manifests.tar.gz

    - name: Upload Yaml
      uses: actions/upload-artifact@v1
      if: success()
      with:
        name: coherence-operator.yaml
        path: build/_output/coherence-operator.yaml

    - name: Upload CRD
      uses: actions/upload-artifact@v1
      if: success()
      with:
        name: coherence.oracle.com_coherence.yaml
        path: build/_output/manifests/crd/coherence.oracle.com_coherence.yaml

    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: test-output
        path: build/_output/test-logs
