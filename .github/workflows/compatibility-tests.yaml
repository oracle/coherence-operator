# Copyright 2019, 2023, Oracle Corporation and/or its affiliates.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at
# http://oss.oracle.com/licenses/upl.

# ---------------------------------------------------------------------------
# Coherence Operator GitHub Actions Backwards Compatibility Tests.
# ---------------------------------------------------------------------------
name: Backwards Compatibility Tests

on:
  workflow_dispatch:
  push:
    branches-ignore:
    - gh-pages
    - 1.0.0
    - 2.x
    - 3.x
  pull_request:
    types:
      - opened
      - synchronize
      - committed
    branches-ignore:
    - gh-pages
    - 1.0.0
    - 2.x
    - 3.x

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        compatibilityVersion:
        - 3.2.9
        - 3.2.8
        - 3.2.7
        - 3.2.6
        - 3.2.5
        - 3.1.5
        include:
        - compatibilityVersion: 3.2.9
          coherence-image: "ghcr.io/oracle/coherence-ce:22.06.3"
          compatibilitySelector: control-plane=coherence
          k8s: kindest/node:v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e
        - compatibilityVersion: 3.2.8
          coherence-image: "ghcr.io/oracle/coherence-ce:22.06.3"
          compatibilitySelector: control-plane=coherence
          k8s: kindest/node:v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e
        - compatibilityVersion: 3.2.7
          coherence-image: "ghcr.io/oracle/coherence-ce:22.06.3"
          compatibilitySelector: control-plane=coherence
          k8s: kindest/node:v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e
        - compatibilityVersion: 3.2.6
          coherence-image: "ghcr.io/oracle/coherence-ce:22.06.3"
          compatibilitySelector: control-plane=coherence
          k8s: kindest/node:v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e
        - compatibilityVersion: 3.2.5
          coherence-image: "ghcr.io/oracle/coherence-ce:22.06.3"
          compatibilitySelector: control-plane=coherence
          k8s: kindest/node:v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e
        - compatibilityVersion: 3.1.5
          coherence-image: "ghcr.io/oracle/coherence-ce:21.12.4"
          compatibilitySelector: control-plane=coherence
          k8s: kindest/node:v1.21.1@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    #   This step will free up disc space on the runner by removing
    #   lots of things that we do not need.
    - name: disc
      shell: bash
      run: |
        echo "Listing 100 largest packages"
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
        df -h
        echo "Removing large packages"
        sudo apt-get remove -y '^dotnet-.*' || true
        sudo apt-get remove -y '^llvm-.*' || true
        sudo apt-get remove -y 'monodoc-http' || true
        sudo apt-get remove -y 'php.*' || true
        sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel || true
        sudo apt-get autoremove -y || true
        sudo apt-get clean
        df -h
        echo "Removing large directories"
        rm -rf /usr/share/dotnet/
        df -h

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19.x

    - name: Cache Go Modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-mods-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-mods-

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Cache Tools
      uses: actions/cache@v3
      with:
        path: build/tools
        key: ${{ runner.os }}-build-tools-${{ hashFiles('**/Makefile') }}
        restore-keys: ${{ runner.os }}-build-tools

    - name: Edit DNS Resolve
      shell: bash
      run: |
        sudo chown -R runner:runner /run/systemd/resolve/stub-resolv.conf
        sudo echo nameserver 8.8.8.8 > /run/systemd/resolve/stub-resolv.conf

    - name: Start KinD Cluster
#     Start a KinD K8s cluster with single worker node
      shell: bash
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
        export KIND_IMAGE=${{ matrix.k8s }}
        make kind
        kubectl version
        kubectl get nodes
        docker pull gcr.io/distroless/java
        docker pull gcr.io/distroless/java11-debian11
        docker pull gcr.io/distroless/java17-debian11
        docker pull ${{ matrix.coherence-image }}

    - name: Build
      shell: bash
      run: make all

    - name: Load Images to KinD
#     Load the images just built to the KinD cluster
      shell: bash
      run: |
        make kind-load

    - name: Compatibility Tests
      shell: bash
      run: |
        export COHERENCE_IMAGE=${{ matrix.coherence-image }} 
        export COMPATIBLE_VERSION=${{ matrix.compatibilityVersion }} 
        export COMPATIBLE_SELECTOR=${{ matrix.compatibilitySelector }}
        make compatibility-test

    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: test-output-${{ matrix.compatibilityVersion }}
        path: build/_output/test-logs
