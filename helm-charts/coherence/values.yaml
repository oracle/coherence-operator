# Copyright 2019, Oracle Corporation and/or its affiliates.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at
# http://oss.oracle.com/licenses/upl.

# wka is used to override the default WKA address.
# By default the WKA address is the address of the headless service created as part of
# the install, which will map to the addresses of ll of the installed Pods. By overriding
# the WKA address it is possible to form a cluster from multiple Helm installs.
#
# This override would typically map to the name of an existing headless service configured with
# selectors so that it matches on all of the Pods that will be part of the Coherence cluster.
wka:

fullnameOverride:
nameOverride:

# The cluster name of a Coherence cluster member.
# If not set the cluster name will default to the Helm release name
cluster:

# The role name
role:

# replicas is the initial size of the Coherence role. If not set the default cluster size is 3.
replicas:

# ----- Configuration of the customer's application -------------------------

application:
  # The type of application. Default if not entered is java. Used for Graal to run things like node so most
  # plain Coherence customers would never use this field
  type:
  # The Coherence container main class. The default value is
  # com.tangosol.net.DefaultCacheServer.
  # If the application type is non-Java this would be the name of the corresponding language specific
  # runnable, for example if the application type is "node" the main may be a Javascript file.
  main:
  # main program args (i.e. args for your main method)
  args: []
  # configuration of the customer's application image (used to be called user artifacts image)
  # userArtifacts.image is the name of the Docker image containing the custom
  #   jar files and configuration files to add to the classpath
  image:
  # application.imagePullPolicy is the image pull policy to use for the custom
  #   artifacts image. If not set the pull policy is "IfNotPresent".
  imagePullPolicy:
  # The application folder in the custom artifacts Docker image containing
  # application artifacts.
  # This will effectively become the working directory of the Coherence container.
  # If not set the application directory default value is "/app".
  appDir:
  # application.libDir is the folder in the custom artifacts Docker image containing jar
  #   files to be added to the classpath of the Coherence container.
  #   If not set the libDir is "/files/lib".
  libDir:
  # application.configDir is the folder in the custom artifacts Docker image containing
  #   configuration files to be added to the classpath of the Coherence container.
  #   If not set the configDir is "/files/conf".
  configDir:

# ----- Coherence specific configuration ------------------------------------

coherence:
  # coherence.overrideConfig is name of the Coherence operational configuration override file,
  # the default is tangosol-coherence-override.xml
  overrideConfig:
  # coherence.cacheConfig is the name of the cache configuration file to use
  cacheConfig:
  # coherence.storageEnabled is true to run Coherence containers as storage enabled cluster members
  # or false to run storage disabled cluster members
  storageEnabled:
  # The policy used to scale the number of replicas in this role.
  scalingPolicy: ParallelUpSafeDownScaling
  # The Coherence image
  image: "${HELM_COHERENCE_IMAGE}"
  # The Coherence image pull policy
  imagePullPolicy:
  # logLevel sets the Coherence log level. This value should be an integer in the range 1 to 9,
  #   the default being 5 (info level).
  logLevel:
  # coherence.metrics configures Coherence metrics publishing
  #   Note: Coherence metrics publishing will be available in 12.2.1.4.
  metrics:
    # coherence.metrics.enabled enables or disables Coherence metrics.
    enabled: false
    # coherence.metrics.port sets the port that Coherence metrics binds to.
    port:
    # coherence.metrics.ssl configures SSL settings for the Coherence metrics endpoints
    ssl:
      # coherence.metrics.ssl.enabled enables or disables SSL on the Coherence metrics endpoint
      #   the default is false (disabled).
      #   When SSL is enabled, see: https://github.com/helm/charts/blob/master/stable/prometheus-operator/README.md
      #   on how to specify prometheus secrets for the certificates required for two-way SSL;
      #   see: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config
      #   on how to configure Prometheus SSL (TLS) connections.
      enabled:
      # coherence.metrics.ssl.secrets is the name of the k8s secrets containing the Java key stores and password files.
      #   This value MUST be provided if SSL is enabled for the Coherence metrics endpoint.
      secrets:
      # coherence.metrics.ssl.keystore is the name of the Java key store file in the k8s secret to use as the SSL keystore
      #   when configuring the metrics endpoint to use SSL.
      keyStore:
      # coherence.metrics.ssl.keyStorePasswordFile is the name of the file in the k8s secret containing the keystore
      #   password when configuring the metrics endpoint to use SSL.
      keyStorePasswordFile:
      # coherence.metrics.ssl.keyPasswordFile is the name of the file in the k8s secret containing the key
      #   password when configuring the metrics endpoint to use SSL.
      keyPasswordFile:
      # coherence.metrics.ssl.keyStoreAlgorithm is the name of the keystore algorithm for the keystore in the k8s secret
      #   used when configuring the metrics endpoint to use SSL. If not set the default is SunX509.
      keyStoreAlgorithm:
      # coherence.metrics.ssl.keyStoreProvider is the name of the keystore provider for the keystore in the k8s secret
      #   used when configuring the metrics endpoint to use SSL.
      keyStoreProvider:
      # coherence.metrics.ssl.keyStoreType is the name of the Java keystore type for the keystore in the k8s secret
      #   used when configuring the metrics endpoint to use SSL. If not set the default is JKS.
      keyStoreType:
      # coherence.metrics.ssl.trustStore is the name of the Java trust store file in the k8s secret to use as the SSL
      #   trust store when configuring the metrics endpoint to use SSL.
      trustStore:
      # coherence.metrics.ssl.trustStorePasswordFile is the name of the file in the k8s secret containing the trust store
      #   password when configuring the metrics endpoint to use SSL.
      trustStorePasswordFile:
      # coherence.metrics.ssl.trustStoreAlgorithm is the name of the keystore algorithm for the trust store in the k8s
      #   secret used when configuring the metrics endpoint to use SSL.  If not set the default is SunX509.
      trustStoreAlgorithm:
      # coherence.metrics.ssl.trustStoreProvider is the name of the keystore provider for the trust store in the k8s
      #   secret used when configuring the metrics endpoint to use SSL.
      trustStoreProvider:
      # coherence.metrics.ssl.trustStoreType is the name of the keystore type for the trust store in the k8s secret
      #   used when configuring the metrics endpoint to use SSL. If not set the default is JKS.
      trustStoreType:
      # coherence.metrics.ssl.requireClientCert is a boolean flag indicating whether the client certificate will be
      #   authenticated by the server (two-way SSL) when configuring the metrics endpoint to use SSL.
      #   If not set the default is false
      requireClientCert:
  # coherence.management configures Coherence management over ReST
  #   Note: Coherence management over ReST will be available in 12.2.1.4.
  management:
    # coherence.management.enabled enables or disables management over ReST.
    enabled: false
    # coherence.management.port sets the port that Coherence management over ReST binds to.
    port:
    # coherence.management.ssl configures SSL settings for the Coherence management over ReST
    ssl:
      # coherence.management.ssl.enabled enables or disables SSL on the Coherence management over ReST endpoint,
      #   the default is false (disabled).
      enabled:
      # coherence.management.ssl.secrets is the name of the k8s secrets containing the Java key stores and password files.
      #   This value MUST be provided if SSL is enabled on the Coherence management over ReST endpoint.
      secrets:
      # coherence.management.ssl.keystore is the name of the Java key store file in the k8s secret to use as the SSL keystore
      #   when configuring management over ReST to use SSL.
      keyStore:
      # coherence.management.ssl.keyStorePasswordFile is the name of the file in the k8s secret containing the keystore
      #   password when configuring management over ReST to use SSL.
      keyStorePasswordFile:
      # coherence.management.ssl.keyStorePasswordFile is the name of the file in the k8s secret containing the key
      #   password when configuring management over ReST to use SSL.
      keyPasswordFile:
      # coherence.management.ssl.keyStoreAlgorithm is the name of the keystore algorithm for the keystore in the k8s secret
      #   used when configuring management over ReST to use SSL. If not set the default is SunX509
      keyStoreAlgorithm:
      # coherence.management.ssl.keyStoreProvider is the name of the keystore provider for the keystore in the k8s secret
      #   used when configuring management over ReST to use SSL.
      keyStoreProvider:
      # coherence.management.ssl.keyStoreType is the name of the Java keystore type for the keystore in the k8s secret used
      #   when configuring management over ReST to use SSL. If not set the default is JKS.
      keyStoreType:
      # coherence.management.ssl.trustStore is the name of the Java trust store file in the k8s secret to use as the SSL
      #   trust store when configuring management over ReST to use SSL.
      trustStore:
      # coherence.management.ssl.trustStorePasswordFile is the name of the file in the k8s secret containing the trust store
      #   password when configuring management over ReST to use SSL.
      trustStorePasswordFile:
      # coherence.management.ssl.trustStoreAlgorithm is the name of the keystore algorithm for the trust store in the k8s
      #   secret used when configuring management over ReST to use SSL.  If not set the default is SunX509.
      trustStoreAlgorithm:
      # coherence.management.ssl.trustStoreProvider is the name of the keystore provider for the trust store in the k8s
      #   secret used when configuring management over ReST to use SSL.
      trustStoreProvider:
      # coherence.management.ssl.trustStoreType is the name of the Java keystore type for the trust store in the k8s secret
      #   used when configuring management over ReST to use SSL. If not set the default is JKS.
      trustStoreType:
      # coherence.management.ssl.requireClientCert is a boolean flag indicating whether the client certificate will be
      #   authenticated by the server (two-way SSL) when configuring management over ReST to use SSL.
      #   If not set the default is false
      requireClientCert:
  # coherence.persistence values configure the on-disc data persistence settings
  persistence:
    # coherence.persistence.enabled enables or disabled on disc persistence of data
    enabled: false
    # coherence.persistence.persistentVolumeClaim is the yaml for the Persistent Volume Claim spec to allocate to each Pod
    # in the StatefulSet. For production servers this number should likely be much larger.
    # In particular, this includes resources, storageClass, dataSource, volumeMode, volumeName and selector.
    #   see: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#persistentvolumeclaim-v1-core
    #   see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
#    persistentVolumeClaim:
    # coherence.persistence.volume allows the configuration of a normal k8s volume mapping
    #   for persistence data instead of a persistent volume claim. If a value is defined
    #   for coherence.persistence.volume then no PVC will be created and persistence data
    #   will instead be written to this volume. If is up to the deployer to understand
    #   the consequences of this and how the guarantees given when using PVCs differ
    #   to the storage guarantees for the particular volume type configured here.
    #   The yaml from below will be used as-is to configure the volume.
#    volume:
  # -------------------------------------------------------------------------
  # coherence.snapshot values configure the on-disc persistence data snapshot (backup) settings
  snapshot:
    # coherence.snapshot.enabled enables or disabled a different location for
    #   persistence snapshot data. If set to false then snapshot files will be written
    #   to the same volume configured for persistence data in the coherence.persistence section.
    enabled: false
    # coherence.snapshot.persistentVolumeClaim is the yaml for the Persistent Volume Claim spec to allocate to each Pod
    # in the StatefulSet. For production servers this number should likely be much larger.
    # In particular, this includes resources, storageClass, dataSource, volumeMode, volumeName and selector.
    #   see: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#persistentvolumeclaim-v1-core
    #   see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
#    persistentVolumeClaim:
    # coherence.snapshot.volume allows the configuration of a normal k8s volume mapping
    #   for persistence snapshot data instead of a persistent volume claim. If a value is defined
    #   for coherence.snapshot.volume then no PVC will be created and persistence data
    #   will instead be written to this volume. If is up to the deployer to understand
    #   the consequences of this and how the guarantees given when using PVCs differ
    #   to the storage guarantees for the particular volume type configured here.
    #   The yaml from below will be used as-is to configure the volume.
#    volume:

# ----- Health configuration ------------------------------------------------

# The port that the health check endpoint will bind to.
healthPort: 6676

# ----- Coherence Utils configuration ---------------------------------------

coherenceUtils:
  image: "${UTILS_IMAGE}"
  imagePullPolicy:

# ----- Network  configuration ----------------------------------------------

# NetworkSpec configures various networking and DNS settings for Pods in a role.
network:
  # Specifies the DNS parameters of a pod. Parameters specified here will be merged to the
  # generated DNS configuration based on DNSPolicy.
#  dnsConfig:
  # Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet',
  # 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy
  # selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS
  # policy explicitly to 'ClusterFirstWithHostNet'.
  dnsPolicy:
  # HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.
  # This is only valid for non-hostNetwork pods.
  hostAliases: []
  # Host networking requested for this pod. Use the host's network namespace. If this option is set,
  # the ports that will be used must be specified. Default to false.
  hostNetwork:
  # Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
  hostname:

# ----- Logging configuration -----------------------------------------------

# logging allows configuration of Coherence and java util logging.
logging:
  # logging.configFile allows the location of the Java util logging configuration file to be overridden.
  #   If this value is not set the logging.properties file embedded in this chart will be used.
  #   If this value is set the configuration will be located by trying the following locations in order:
  #     1. If logging.configMapName is set then the config map will be mounted as a volume and the logging
  #          properties file will be located as a file location relative to the ConfigMap volume mount point.
  #     2. If userArtifacts.imageName is set then using this value as a file name relative to the location of the
  #          configuration files directory in the user artifacts image.
  #     3. Using this value as an absolute file name.
  #
  configFile:
  # logging.configMapName allows a config map to be mounted as a volume containing the logging
  #   configuration file to use.
  configMapName:
  # Specify the Fluentd settings
  fluentd:
    # fluentd.enabled determines whether Fluentd log capture is enabled
    enabled: false
    # fluentd.image is the name of the Fluentd image to use in the logging side-car container
    image: fluent/fluentd-kubernetes-daemonset:v1.3.3-debian-elasticsearch-1.3
    # imagePullPolicy controls the K8s container spec's pull policy
    # If not set the pull policy is "IfNotPresent".
    imagePullPolicy:
    # fluentd configuration file configuring source for application log.
    configFile:
    # This value should be source.tag from fluentd.application.configFile.
    tag:

# ----- JVM specific configuration ------------------------------------------

jvm:
  args: []
  useContainerLimits: true
  flightRecorder: true
  diagnosticsVolume:
  debug:
    enabled: false
    port:
    suspend: false
    attach:
  memory:
    heapSize:
    directMemorySize:
    stackSize:
    metaspaceSize:
    nativeMemoryTracking:
    onOutOfMemory:
      exit:
      heapDump:
  gc:
    collector:
    args: []
    logging: true
  jmxmp:
    enabled: false
    port:

# ----- Coherence Container specific configuration --------------------------

# The ports to expose
ports: []

# Environment variables to add to the container in the Coherence Pods
env: []

# SecurityContext is the PodSecurityContext that will be added to all of the Pods in this role.
# See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext:
# Share a single process namespace between all of the containers in a pod. When this is set containers will
# be able to view and signal processes from other containers in the same pod, and the first process in each
# container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set.
# Optional: Default to false.
shareProcessNamespace:
# Use the host's ipc namespace. Optional: Default to false.
hostIPC:

# -------------------------------------------------------------------------
# readinessProbe is the readiness probe config.
#   ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
readinessProbe:
  exec:
  httpGet:
  tcpSocket:
  # Number of seconds after the container has started before readiness probes are initiated.
  # If not set, the default initialDelaySeconds is 30.
  initialDelaySeconds:
  # How often (in seconds) to perform the probe. Minimum value is 1.
  # If not set, the default periodSeconds is 60.
  periodSeconds:
  # Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1.
  # If not set, the default timeoutSeconds is 5.
  timeoutSeconds:
  # Minimum consecutive successes for the probe to be considered successful after having failed.
  # Defaults to 1. Minimum value is 1.
  successThreshold:
  # When a Pod starts and the probe fails, Kubernetes will try failureThreshold times
  # before giving up.
  # In case of readiness probe the Pod will be marked Unready. Minimum value is 1.
  # If not set the default failureThreshold is 50.
  failureThreshold:

# -------------------------------------------------------------------------
# livenessProbe is the readiness probe config.
#   ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
livenessProbe:
  exec:
  httpGet:
  tcpSocket:
  # Number of seconds after the container has started before liveness probes are initiated.
  # If not set, the default initialDelaySeconds is 30.
  initialDelaySeconds:
  # How often (in seconds) to perform the probe. Minimum value is 1.
  # If not set, the default periodSeconds is 60.
  periodSeconds:
  # Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1.
  # If not set, the default timeoutSeconds is 5.
  timeoutSeconds:
  # When a Pod starts and the probe fails, Kubernetes will try failureThreshold times
  # before giving up. Giving up in case of liveness probe means restarting the Pod.
  # In case of readiness probe the Pod will be marked Unready. Minimum value is 1.
  # If not set the default failureThreshold is 50.
  failureThreshold:

# ----- Pod configuration ---------------------------------------------------

# ---------------------------------------------------------------------------
# resources is the optional resource requests and limits for the containers
# ref: http://kubernetes.io/docs/user-guide/compute-resources/
#
# By default the cpu requests is set to zero and the cpu limit set to 32. This
# is because it appears that K8s defaults cpu to one and since Java 10 the JVM
# now correctly picks up cgroup cpu limits then the JVM will only see one cpu.
# By setting resources.requests.cpu=0 and resources.limits.cpu=32 it ensures that
# the JVM will see the either the number of cpus on the host if this is <= 32 or
# the JVM will see 32 cpus if the host has > 32 cpus. The limit is set to zero
# so that there is no hard-limit applied.
#
# No default memory limits are applied.
resources:
  requests:
    cpu: 0
#    memory: 4Gi
  limits:
    cpu: 32
#    memory: 256Gi

# annotations are free-form yaml that will be added to the store release as annotations
# Any annotations should be placed BELOW this annotations: key. For example if we wanted to
# include annotations for Prometheus it would look like this:
#
#   annotations:
#     prometheus.io/scrape: "true"
#     prometheus.io/port: "2408"
#
annotations: {}

# Pod labels
labels: []

# volumes defines extra volume mappings that will be added to the Coherence Pod.
#   The content of this yaml should match the normal k8s volumes section of a Pod definition
#   as described in https://kubernetes.io/docs/concepts/storage/volumes/
volumes:

# volumeClaimTemplates defines extra PVC mappings that will be added to the Coherence Pod.
#   The content of this yaml should match the normal k8s volumeClaimTemplates section of a Pod definition
#   as described in https://kubernetes.io/docs/concepts/storage/persistent-volumes/
volumeClaimTemplates:

# volumeMounts defines extra volume mounts to map to the additional volumes or PVCs declared above
#   in volumes and volumeClaimTemplates
volumeMounts:

# ---------------------------------------------------------------------------
# Pod scheduling values

# affinity controls Pod scheduling preferences.
#   ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

# nodeSelector is the Node labels for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}

# tolerations is for nodes that have taints on them.
#   Useful if you want to dedicate nodes to just run the coherence container
#   For example:
#   tolerations:
#   - key: "key"
#     operator: "Equal"
#     value: "value"
#     effect: "NoSchedule"
#
#   ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# ----- General configuration -----------------------------------------------

# imagePullSecrets provides support pulling images from private registries, the value references
#   one or more secrets to be used when pulling images. Secrets must be manually created in the
#   target namespace.
#   ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#
#   For example, adding the pull secret "foo" would be:
#
#   imagePullSecrets:
#   - name: "foo"
#
#   adding multiple pull secrets "foo" and "bar" would be
#
#   imagePullSecrets:
#   - name: "foo"
#   - name: "bar"
imagePullSecrets: []

# serviceAccountName is the name to use for the service account to use when RBAC is enabled
#   The role bindings must already have been created as this chart does not create them it just
#   sets the serviceAccountName value in the Pod spec.
serviceAccountName:
# Whether or not to auto-mount API credentials for a service account
automountServiceAccountToken:

# The timeout in seconds used when making rest requests to the Operator from the start script.
operatorRequestTimeout: 120
