{{/* Copyright 2019, 2020, Oracle Corporation and/or its affiliates.  All rights reserved.*/}}
{{/* Licensed under the Universal Permissive License v 1.0 as shown at*/}}
{{/* http://oss.oracle.com/licenses/upl.*/}}
{{/* */}}
{{- $cohImage := .Values.coherence.image | default "${HELM_COHERENCE_IMAGE}" -}}
{{- $utilsImage := .Values.coherenceUtils.image | default "${UTILS_IMAGE}" -}}
{{- $extAppDir := "/u01/oracle/oracle_home/coherence/app" -}}
{{- $extLibDir := "/u01/oracle/oracle_home/coherence/app/lib" -}}
{{- $extConfDir := "/u01/oracle/oracle_home/coherence/app/conf" -}}
{{- $healthPort := .Values.healthPort | default 6676 }}
{{- define "rootCoherenceSnapshot" }}
- mountPath: "/root/coherence/snapshot"
  name: snapshot-volume
{{- end }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "coherence.fullname" . }}
  labels:
    {{- include "coherence.release_labels" . | indent 4 }}
    component: coherence
spec:
  replicas: {{ .Values.replicas | default 3 }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      coherenceDeployment: {{ template "coherence.fullname" . }}
      component: coherencePod
  serviceName: {{ template "coherence.name" . }}
  template:
    metadata:
      labels:
{{- include "coherence.release_labels" . | indent 8 }}
        component: coherencePod
{{- if .Values.coherence.excludeFromWKA }}
        coherenceWKAMember: "false"
{{- else }}
        coherenceWKAMember: "true"
{{- end }}
{{- if .Values.labels }}
{{ toYaml .Values.labels | indent 8 }}
{{- end }}
{{- if .Values.annotations }}
      annotations:
{{ toYaml .Values.annotations | indent 8 }}
{{- end }}
    spec:
{{- if .Values.serviceAccountName }}
{{-   if not ((eq .Values.serviceAccountName "default")) }}
      serviceAccountName: {{ .Values.serviceAccountName }}
{{-   end }}
{{- end }}
{{- $automountServiceAccountTokenType := typeOf .Values.automountServiceAccountToken }}
{{- if eq $automountServiceAccountTokenType "bool" }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
{{- end }}

{{- if .Values.securityContext }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
{{- end }}
{{- $shareProcessNamespaceType := typeOf .Values.shareProcessNamespace }}
{{- if eq $shareProcessNamespaceType "bool" }}
      shareProcessNamespace: {{ .Values.shareProcessNamespace }}
{{- end }}
{{- $hostIPCType := typeOf .Values.hostIPC }}
{{- if eq $hostIPCType "bool" }}
      hostIPC: {{ .Values.hostIPC }}
{{- end }}
{{- if .Values.network }}
{{-   if .Values.network.dnsConfig }}
      dnsConfig:
{{ toYaml .Values.network.dnsConfig | indent 8 }}
{{-   end }}
{{-   if .Values.network.dnsPolicy }}
      dnsPolicy: {{ .Values.network.dnsPolicy }}
{{-   end }}
{{-   if .Values.network.hostAliases }}
      hostAliases:
{{ toYaml .Values.network.hostAliases | indent 8 }}
{{-   end }}
{{- $hostNetworkType := typeOf .Values.network.hostNetwork }}
{{- if eq $hostNetworkType "bool" }}
      hostNetwork: {{ .Values.network.hostNetwork }}
{{- end }}
{{-   if .Values.network.hostname }}
      hostname: {{ .Values.network.hostname }}
{{-   end }}
{{- end }}
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
{{- end }}
{{/* --------------------------------------------------------------------------- */}}
{{/* Node scheduling                                                             */}}
{{/* --------------------------------------------------------------------------- */}}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- else }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: coherenceCluster
                  operator: In
                  values:
                  - {{ template "coherence.clusterName" . }}
                - key: coherenceRole
                  operator: In
                  values:
                  - {{ template "coherence.role" . }}
              topologyKey: failure-domain.beta.kubernetes.io/zone
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
# ---------------------------------------------------------------------------
#  Containers:
# ---------------------------------------------------------------------------
      initContainers:
# ---------------------------------------------------------------------------
#  Container: For adding required artifacts e.g. startup scripts to the pod.
# ---------------------------------------------------------------------------
        - name: coherence-k8s-utils
          image: {{ $utilsImage | quote }}
{{- if .Values.coherenceUtils.imagePullPolicy }}
          imagePullPolicy: {{ .Values.coherenceUtils.imagePullPolicy }}
{{- end }}
          env:
          - name: COH_UTIL_DIR
            value: "/utils"
          - name: COH_CLUSTER_NAME
            value: {{ template "coherence.clusterName" . }}
          volumeMounts:
          - name: utils-dir
            mountPath: /utils
{{- if .Values.coherence.persistence }}
{{-   if .Values.coherence.persistence.enabled }}
          - mountPath: "/persistence"
            name: persistence-volume
{{-   end }}
{{- end }}
{{- if .Values.coherence.snapshot }}
{{-   if .Values.coherence.snapshot.enabled }}
          - mountPath: "/snapshot"
            name: snapshot-volume
{{-   else if .Values.coherence.snapshot.volume }}
{{-     if .Values.coherence.persistence }}
{{-       if .Values.coherence.persistence.enabled }}
{{- include "rootCoherenceSnapshot" . | indent 12 }}
{{-       end }}
{{-     else }}
{{- include "rootCoherenceSnapshot" . | indent 12 }}
{{-     end }}
{{-   end }}
{{- end }}
          command: [ "/files/utils-init" ]
# ---------------------------------------------------------------------------
#  Container: application artifacts
# ---------------------------------------------------------------------------
{{- if and .Values.application.image }}
        - name: application
          image: {{ .Values.application.image | quote }}
{{-     if .Values.application.imagePullPolicy }}
          imagePullPolicy: {{ .Values.application.imagePullPolicy }}
{{-     end }}
          env:
          - name: "EXTERNAL_APP_DIR"
            value: {{ $extAppDir }}
          - name: "APP_DIR"
            value: {{ .Values.application.appDir | default "/app" | quote }}
          - name: "EXTERNAL_LIB_DIR"
            value: {{ $extLibDir }}
          - name: "LIB_DIR"
            value: {{ .Values.application.libDir | default "/app/lib" | quote }}
          - name: "EXTERNAL_CONF_DIR"
            value: {{ $extConfDir }}
          - name: "CONF_DIR"
            value: {{ .Values.application.configDir | default "/app/conf" | quote }}
          volumeMounts:
          - name: utils-dir
            mountPath: /utils
          - name: application-dir
            mountPath: {{ $extAppDir | quote }}
          command: [ "/utils/copy"]
{{- end }}
      containers:
# ---------------------------------------------------------------------------
#  Container: coherence
# ---------------------------------------------------------------------------
        - name: "coherence"
          image: {{ $cohImage | quote }}
{{- if .Values.coherence.imagePullPolicy }}
          imagePullPolicy: {{ .Values.coherence.imagePullPolicy }}
{{- end }}
          ports:
            - name: "coherence"
              containerPort: 7
            - name: "health"
              containerPort: {{ $healthPort }}
{{- if eq (default false .Values.jvm.debug.enabled) true }}
            - name: "debug-port"
              containerPort: {{ .Values.jvm.debug.port | default 5005 }}
{{- end }}
{{- if .Values.ports -}}
{{-   range $port := .Values.ports }}
            - name: {{ $port.name | quote }}
              containerPort: {{ $port.port }}
              protocol: {{ $port.protocol | default "TCP" }}
{{-   end }}
{{- end }}
          env:
{{- if .Values.env -}}
{{ toYaml .Values.env | nindent 12 }}
{{- end }}
            - name: COH_WKA
              value: {{ .Values.wka }}
            - name: COH_APP_DIR
              value: {{ $extAppDir }}
            - name: COH_EXTRA_CLASSPATH
              value: {{ printf "%s/*:%s" $extLibDir $extConfDir | quote }}
            - name: COH_MGMT_HTTP_PORT
              value: {{ .Values.coherence.management.port | default 30000 | quote }}
            - name: COH_METRICS_PORT
              value: {{ .Values.coherence.metrics.port | default 9612 | quote }}
            - name: COH_MACHINE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: COH_MEMBER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: COH_POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: OPERATOR_HOST
              valueFrom:
                secretKeyRef:
                  name: coherence-operator-config
                  key: operatorhost
                  optional: true
            - name: COH_SITE_INFO_LOCATION
              value: http://$(OPERATOR_HOST)/site/$(COH_MACHINE_NAME)
            - name: COH_RACK_INFO_LOCATION
              value: http://$(OPERATOR_HOST)/rack/$(COH_MACHINE_NAME)
            - name: COH_CLUSTER_NAME
              value: {{ template "coherence.clusterName" . }}
            - name: COH_ROLE
              value: {{ template "coherence.role" . }}
            - name: COH_UTIL_DIR
              value: "/utils"
{{/* */}}
{{/* ----- Application variables -------------------------------------------- */}}
{{/* */}}
{{- if .Values.application }}
{{-   if .Values.application.type }}
            - name: APP_TYPE
              value: {{ .Values.application.type | quote }}
{{-   end }}
{{-   if .Values.application.main }}
            - name: COH_MAIN_CLASS
              value: {{ .Values.application.main | quote }}
{{-   end }}
{{-   if .Values.application.args }}
            - name: COH_MAIN_ARGS
              value: {{ join " " .Values.application.args | quote }}
{{-   end }}
{{- end }}
{{/* */}}
{{/* ----- JVM variables ---------------------------------------------------- */}}
{{/* */}}
{{- if .Values.jvm }}
{{-   if .Values.jvm.args }}
            - name: JVM_ARGS
              value: {{ join " " .Values.jvm.args | quote }}
{{-   end }}
{{-   if .Values.jvm.useContainerLimits }}
            - name: JVM_USE_CONTAINER_LIMITS
              value: {{ .Values.jvm.useContainerLimits | quote }}
{{-   end }}
{{-   if .Values.jvm.flightRecorder }}
            - name: JVM_FLIGHT_RECORDER
              value: {{ .Values.jvm.flightRecorder | quote }}
{{-   end }}
{{-   if .Values.jvm.memory }}
{{-     if .Values.jvm.memory.heapSize }}
            - name: JVM_HEAP_SIZE
              value: {{ .Values.jvm.memory.heapSize | quote }}
{{-     end }}
{{-     if .Values.jvm.memory.directMemorySize }}
            - name: JVM_DIRECT_MEMORY_SIZE
              value: {{ .Values.jvm.memory.directMemorySize | quote }}
{{-     end }}
{{-     if .Values.jvm.memory.stackSize }}
            - name: JVM_STACK_SIZE
              value: {{ .Values.jvm.memory.stackSize | quote }}
{{-     end }}
{{-     if .Values.jvm.memory.metaspaceSize }}
            - name: JVM_METASPACE_SIZE
              value: {{ .Values.jvm.memory.metaspaceSize | quote }}
{{-     end }}
{{-     if .Values.jvm.memory.nativeMemoryTracking }}
            - name: JVM_NATIVE_MEMORY_TRACKING
              value: {{ .Values.jvm.memory.nativeMemoryTracking | quote }}
{{-     end }}
{{-     if .Values.jvm.jmxmp }}
{{-       if .Values.jvm.jmxmp.enabled }}
            - name: JVM_JMXMP_ENABLED
              value: {{ .Values.jvm.jmxmp.enabled | quote }}
            - name: JVM_JMXMP_PORT
              value: {{ .Values.jvm.jmxmp.port | quote }}
{{-       end }}
{{-     end }}
{{-     if .Values.jvm.memory.onOutOfMemory }}
{{-       if .Values.jvm.memory.onOutOfMemory.exit }}
            - name: JVM_OOM_EXIT
              value: {{ .Values.jvm.memory.onOutOfMemory.exit | quote }}
{{-       end }}
{{-       if .Values.jvm.memory.onOutOfMemory.heapDump }}
            - name: JVM_OOM_HEAP_DUMP
              value: {{ .Values.jvm.memory.onOutOfMemory.heapDump | quote }}
{{-       end }}
{{-     end }}
{{-   end }}
{{-   if .Values.jvm.gc }}
{{-     if .Values.jvm.gc.args }}
            - name: JVM_GC_ARGS
              value: {{ join " " .Values.jvm.gc.args | quote }}
{{-     end }}
{{-     if .Values.jvm.gc.collector }}
            - name: JVM_GC_COLLECTOR
              value: {{ .Values.jvm.gc.collector | quote }}
{{-     end }}
{{-     if .Values.jvm.gc.logging }}
            - name: JVM_GC_LOGGING
              value: {{ .Values.jvm.gc.logging | quote }}
{{-     end }}
{{-   end }}
{{-   if .Values.jvm.debug }}
{{-     if eq (default false .Values.jvm.debug.enabled) true }}
            - name: JVM_DEBUG_ENABLED
              value: "true"
{{-       if .Values.jvm.debug.port }}
            - name: JVM_DEBUG_PORT
              value: {{ .Values.jvm.debug.port | quote }}
{{-       end }}
{{-       if .Values.jvm.debug.suspend }}
            - name: JVM_DEBUG_SUSPEND
              value: {{ .Values.jvm.debug.suspend | quote }}
{{-       end }}
{{-       if .Values.jvm.debug.attach }}
            - name: JVM_DEBUG_ATTACH
              value: {{ .Values.jvm.debug.attach | quote }}
{{-       end }}
{{-     end }}
{{-   end }}
{{- end }}
{{/* */}}
{{/* ----- Coherence variables ---------------------------------------------- */}}
{{/* */}}
{{- if .Values.coherence.cacheConfig }}
            - name: COH_CACHE_CONFIG
              value: {{ .Values.coherence.cacheConfig | quote }}
{{- end }}
{{- if .Values.coherence.overrideConfig }}
            - name: COH_OVERRIDE_CONFIG
              value: {{ .Values.coherence.overrideConfig | quote }}
{{- end }}
{{- $storageEnabled := toString .Values.coherence.storageEnabled }}
{{- if eq $storageEnabled "true" }}
            - name: COH_STORAGE_ENABLED
              value: "true"
{{- else if eq $storageEnabled "false" }}
            - name: COH_STORAGE_ENABLED
              value: "false"
{{- end }}
{{- if .Values.operatorRequestTimeout }}
            - name: OPERATOR_REQUEST_TIMEOUT
              value: {{ .Values.operatorRequestTimeout | quote }}
{{- end }}
{{- if .Values.coherence.persistence }}
{{-   if .Values.coherence.persistence.enabled }}
            - name: COH_PERSISTENCE_ENABLED
              value: "true"
{{-   end }}
{{- end }}
{{- if .Values.coherence.snapshot }}
{{-   if .Values.coherence.snapshot.enabled }}
            - name: COH_SNAPSHOT_ENABLED
              value: "true"
{{-   end }}
{{- end }}
{{/* ----- Coherence management variables ----------------------------------- */}}
            - name: COH_MGMT_ENABLED
              value: {{ .Values.coherence.management.enabled | quote }}
{{- if and .Values.coherence.management.enabled .Values.coherence.management.ssl }}
{{-   if .Values.coherence.management.ssl.enabled }}
            - name: COH_MGMT_SSL_ENABLED
              value: {{ .Values.coherence.management.ssl.enabled | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.secrets }}
            - name: COH_MGMT_SSL_CERTS
              value: "/coherence/certs/management"
{{-   end }}
{{-   if .Values.coherence.management.ssl.keyStore }}
            - name: COH_MGMT_SSL_KEYSTORE
              value: {{ .Values.coherence.management.ssl.keyStore | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.keyStorePasswordFile }}
            - name: COH_MGMT_SSL_KEYSTORE_PASSWORD_FILE
              value: {{ .Values.coherence.management.ssl.keyStorePasswordFile | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.keyPasswordFile }}
            - name: COH_MGMT_SSL_KEY_PASSWORD_FILE
              value: {{ .Values.coherence.management.ssl.keyPasswordFile | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.keyStoreAlgorithm }}
            - name: COH_MGMT_SSL_KEYSTORE_ALGORITHM
              value: {{ .Values.coherence.management.ssl.keyStoreAlgorithm | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.keyStoreProvider }}
            - name: COH_MGMT_SSL_KEYSTORE_PROVIDER
              value: {{ .Values.coherence.management.ssl.keyStoreProvider | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.keyStoreType }}
            - name: COH_MGMT_SSL_KEYSTORE_TYPE
              value: {{ .Values.coherence.management.ssl.keyStoreType | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.trustStore }}
            - name: COH_MGMT_SSL_TRUSTSTORE
              value: {{ .Values.coherence.management.ssl.trustStore | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.trustStorePasswordFile }}
            - name: COH_MGMT_SSL_TRUSTSTORE_PASSWORD_FILE
              value: {{ .Values.coherence.management.ssl.trustStorePasswordFile | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.trustStoreAlgorithm }}
            - name: COH_MGMT_SSL_TRUSTSTORE_ALGORITHM
              value: {{ .Values.coherence.management.ssl.trustStoreAlgorithm | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.trustStoreProvider }}
            - name: COH_MGMT_SSL_TRUSTSTORE_PROVIDER
              value: {{ .Values.coherence.management.ssl.trustStoreProvider | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.trustStoreType }}
            - name: COH_MGMT_SSL_TRUSTSTORE_TYPE
              value: {{ .Values.coherence.management.ssl.trustStoreType | quote }}
{{-   end }}
{{-   if .Values.coherence.management.ssl.requireClientCert }}
            - name: COH_MGMT_SSL_REQUIRE_CLIENT_CERT
              value: "true"
{{-   end }}
{{- end }}
{{/* ----- Coherence metrics variables -------------------------------------- */}}
            - name: COH_METRICS_ENABLED
              value: {{ .Values.coherence.metrics.enabled | quote }}
{{- if and .Values.coherence.metrics.enabled .Values.coherence.metrics.ssl }}
{{-   if .Values.coherence.metrics.ssl.enabled }}
            - name: COH_METRICS_SSL_ENABLED
              value: {{ .Values.coherence.metrics.ssl.enabled | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.secrets }}
            - name: COH_METRICS_SSL_CERTS
              value: "/coherence/certs/metrics"
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.keyStore }}
            - name: COH_METRICS_SSL_KEYSTORE
              value: {{ .Values.coherence.metrics.ssl.keyStore | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.keyStorePasswordFile }}
            - name: COH_METRICS_SSL_KEYSTORE_PASSWORD_FILE
              value: {{ .Values.coherence.metrics.ssl.keyStorePasswordFile | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.keyPasswordFile }}
            - name: COH_METRICS_SSL_KEY_PASSWORD_FILE
              value: {{ .Values.coherence.metrics.ssl.keyPasswordFile | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.keyStoreAlgorithm }}
            - name: COH_METRICS_SSL_KEYSTORE_ALGORITHM
              value: {{ .Values.coherence.metrics.ssl.keyStoreAlgorithm | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.keyStoreProvider }}
            - name: COH_METRICS_SSL_KEYSTORE_PROVIDER
              value: {{ .Values.coherence.metrics.ssl.keyStoreProvider | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.keyStoreType }}
            - name: COH_METRICS_SSL_KEYSTORE_TYPE
              value: {{ .Values.coherence.metrics.ssl.keyStoreType | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.trustStore }}
            - name: COH_METRICS_SSL_TRUSTSTORE
              value: {{ .Values.coherence.metrics.ssl.trustStore | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.trustStorePasswordFile }}
            - name: COH_METRICS_SSL_TRUSTSTORE_PASSWORD_FILE
              value: {{ .Values.coherence.metrics.ssl.trustStorePasswordFile | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.trustStoreAlgorithm }}
            - name: COH_METRICS_SSL_TRUSTSTORE_ALGORITHM
              value: {{ .Values.coherence.metrics.ssl.trustStoreAlgorithm | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.trustStoreProvider }}
            - name: COH_METRICS_SSL_TRUSTSTORE_PROVIDER
              value: {{ .Values.coherence.metrics.ssl.trustStoreProvider | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.trustStoreType }}
            - name: COH_METRICS_SSL_TRUSTSTORE_TYPE
              value: {{ .Values.coherence.metrics.ssl.trustStoreType | quote }}
{{-   end }}
{{-   if .Values.coherence.metrics.ssl.requireClientCert }}
            - name: COH_METRICS_SSL_REQUIRE_CLIENT_CERT
              value: "true"
{{-   end }}
{{- end }}
{{/* */}}
{{/* ----- Health variables ------------------------------------------------- */}}
{{/* */}}
            - name: COH_HEALTH_PORT
              value: {{ $healthPort | quote }}
{{/* */}}
{{/* ----- Logging variables ------------------------------------------------ */}}
{{/* */}}
{{- if .Values.logging }}
{{-   if .Values.coherence.logLevel }}
            - name: COH_LOG_LEVEL
              value: {{ .Values.coherence.logLevel | quote }}
{{-   end }}
{{-   if .Values.logging.configFile }}
{{-     if .Values.logging.configMapName }}
#          Set the logging configuration relative to /loggingconfig mounted from the logging-config ConfigMap volume
            - name: COH_LOGGING_CONFIG
              value: {{ printf "/loggingconfig/%s" .Values.logging.configFile | quote }}
{{-     else if .Values.application.image }}
#          Set the logging configuration relative to user artifacts configuration directory
            - name: COH_LOGGING_CONFIG
              value: {{ printf "%s/%s" $extConfDir .Values.logging.configFile | quote }}
{{-     else }}
#          Set the logging configuration as an absolute file name
            - name: COH_LOGGING_CONFIG
              value: {{ .Values.logging.configFile | quote }}
{{-     end }}
{{-   else }}
#          Use the default logging configuration
            - name: COH_LOGGING_CONFIG
              value: "/scripts/logging.properties"
{{-   end }}
{{- end }}
{{/* */}}
{{/* ------------------------------------------------------------------------ */}}
{{/* */}}
          readinessProbe:
{{- if .Values.readinessProbe.exec }}
{{    toYaml .Values.readinessProbe.exec | indent 12 }}
{{- else if .Values.readinessProbe.httpGet }}
{{    toYaml .Values.readinessProbe.httpGet | indent 12 }}
{{- else if .Values.readinessProbe.tcpSocket }}
{{    toYaml .Values.readinessProbe.tcpSocket | indent 12 }}
{{- else }}
            httpGet:
              port: {{ $healthPort }}
              path: "/ready"
{{- end }}
            initialDelaySeconds: {{default 30 .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds:       {{default 60 .Values.readinessProbe.periodSeconds }}
            failureThreshold:    {{default 50 .Values.readinessProbe.failureThreshold }}
            successThreshold:    {{ .Values.readinessProbe.successThreshold }}
            timeoutSeconds:      {{default 5 .Values.readinessProbe.timeoutSeconds }}
          livenessProbe:
{{- if .Values.livenessProbe.exec }}
{{    toYaml .Values.livenessProbe.exec | indent 12 }}
{{- else if .Values.livenessProbe.httpGet }}
{{    toYaml .Values.livenessProbe.httpGet | indent 12 }}
{{- else if .Values.livenessProbe.tcpSocket }}
{{    toYaml .Values.livenessProbe.tcpSocket | indent 12 }}
{{- else }}
            httpGet:
              port: {{ $healthPort }}
              path: "/healthz"
{{- end }}
            initialDelaySeconds: {{default 45 .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds:       {{default 60 .Values.livenessProbe.periodSeconds }}
            failureThreshold:    {{default 5 .Values.livenessProbe.failureThreshold }}
            timeoutSeconds:      {{default 5 .Values.livenessProbe.timeoutSeconds }}
{{/* */}}
{{/* ------------------------------------------------------------------------ */}}
{{/* */}}
          command:
            - "/bin/sh"
            - "-x"
            - "/scripts/startCoherence.sh"
            - "server"
{{/* */}}
{{/* ------------------------------------------------------------------------ */}}
{{/* */}}
{{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{- end }}
{{/* */}}
{{/* ----- Volume Mounts ---------------------------------------------------- */}}
{{/* */}}
          volumeMounts:
            - name: log-dir
              mountPath: /logs
              readOnly: false
            - name: utils-dir
              mountPath: /utils
            - name: application-dir
              mountPath: {{ $extAppDir | quote }}
            - name: coherence-scripts
              mountPath: /scripts
            - name: jvm
              mountPath: /jvm
{{- if .Values.volumeMounts }}
{{ toYaml .Values.volumeMounts | indent 12 }}
{{- end }}
{{- if .Values.logging }}
{{-   if .Values.logging.configMapName }}
            - name: logging-config
              mountPath: /loggingconfig
{{-   end }}
{{- end }}
{{- if .Values.coherence.management.ssl }}
{{-   if .Values.coherence.management.ssl.secrets }}
            - name: management-ssl-config
              mountPath: /coherence/certs/management
              readOnly: true
{{-   end }}
{{- end }}
{{- if .Values.coherence.metrics.ssl }}
{{-   if .Values.coherence.metrics.ssl.secrets }}
            - name: metrics-ssl-config
              mountPath: /coherence/certs/metrics
              readOnly: true
{{-   end }}
{{- end }}
{{- if .Values.coherence.persistence }}
{{-   if .Values.coherence.persistence.enabled }}
            - mountPath: "/persistence"
              name: persistence-volume
{{-   end }}
{{- end }}
{{- if .Values.coherence.snapshot }}
{{-   if .Values.coherence.snapshot.enabled }}
            - mountPath: "/snapshot"
              name: snapshot-volume
{{-   else if .Values.coherence.snapshot.volume }}
{{-     if .Values.coherence.persistence }}
{{-       if .Values.coherence.persistence.enabled }}
{{- include "rootCoherenceSnapshot" . | indent 12 }}
{{-       end }}
{{-     else }}
{{- include "rootCoherenceSnapshot" . | indent 12 }}
{{-     end }}
{{-   end }}
{{- end }}
{{- if .Values.logging.fluentd.enabled }}
# ---------------------------------------------------------------------------
#  Container: fluentd
# ---------------------------------------------------------------------------
        - name: fluentd
          image: {{ .Values.logging.fluentd.image }}
          imagePullPolicy: {{ .Values.logging.fluentd.imagePullPolicy | default "IfNotPresent" }}
          args: ["-c", "/etc/fluent.conf"]
          env:
            - name: COHERENCE_POD_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: FLUENTD_CONF
              value: fluentd-coherence.conf
            - name: FLUENT_ELASTICSEARCH_SED_DISABLE
              value: "true"
            - name: ELASTICSEARCH_USER
              valueFrom:
                secretKeyRef:
                  name: coherence-monitoring-config
                  key: elasticsearchuser
                  optional: true
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: coherence-monitoring-config
                  key: elasticsearchpassword
                  optional: true
            - name: ELASTICSEARCH_HOSTS
              valueFrom:
                secretKeyRef:
                  name: coherence-monitoring-config
                  key: elasticsearchhosts
                  optional: true
            - name: ELASTICSEARCH_SCHEME
              valueFrom:
                secretKeyRef:
                  name: coherence-monitoring-config
                  key: elasticsearchscheme
                  optional: true
          volumeMounts:
            - mountPath: /fluentd/etc/fluentd-coherence.conf
              subPath: fluentd-coherence.conf
              name: fluentd-coherence-conf
            - mountPath: /logs
              name: log-dir
{{- end }}
# ---------------------------------------------------------------------------
#  Volumes
# ---------------------------------------------------------------------------
      volumes:
#       The logs directory
        - name: log-dir
          emptyDir:
            medium:
#       The utility files and scripts directory
        - name: utils-dir
          emptyDir: {}
#       The application directory
        - name: application-dir
          emptyDir: {}
#       The JVM diagnostics directory
        - name: jvm
{{- if .Values.jvm.diagnosticsVolume }}
{{ toYaml .Values.jvm.diagnosticsVolume | indent 10 }}
{{- else }}
          emptyDir: {}
{{- end }}
#       The scripts loaded from a ConfigMap generated by the Helm chart
        - name: coherence-scripts
          configMap:
            name: {{ template "coherence.fullname" . }}-scripts
            defaultMode: 0777
{{- if .Values.logging }}
{{-   if .Values.logging.configMapName }}
#       The scripts loaded from a ConfigMap generated by the Helm chart
        - name: logging-config
          configMap:
            name: {{ .Values.logging.configMapName }}
            defaultMode: 0777
{{-   end }}
{{- end }}
{{- if .Values.coherence.management.ssl }}
{{-   if .Values.coherence.management.ssl.secrets }}
#       The Management SSL certs and passwords are loaded from existing k8s secrets
        - name: management-ssl-config
          secret:
            secretName: {{ .Values.coherence.management.ssl.secrets }}
            defaultMode: 0777
{{-   end }}
{{- end }}
{{- if .Values.coherence.metrics.ssl }}
{{-   if .Values.coherence.metrics.ssl.secrets }}
#       The Metrics SSL certs and passwords are loaded from existing k8s secrets
        - name: metrics-ssl-config
          secret:
            secretName: {{ .Values.coherence.metrics.ssl.secrets }}
            defaultMode: 0777
{{-   end }}
{{- end }}
{{- if .Values.coherence.persistence }}
{{-   if .Values.coherence.persistence.volume }}
        - name: persistence-volume
{{ toYaml .Values.coherence.persistence.volume | indent 10 }}
{{-   end }}
{{- end }}
{{- if .Values.coherence.snapshot }}
{{-   if .Values.coherence.snapshot.volume }}
        - name: snapshot-volume
{{ toYaml .Values.coherence.snapshot.volume | indent 10 }}
{{-   end }}
{{- end }}
{{- if .Values.volumes }}
{{ toYaml .Values.volumes | indent 8 }}
{{- end }}
{{- if .Values.logging.fluentd.enabled }}
        - name: fluentd-coherence-conf
          configMap:
            name: {{ template "coherence.fullname" . }}-efk-config
            defaultMode: 420
{{- end }}
# ---------------------------------------------------------------------------
#  Volumes claim templates
# ---------------------------------------------------------------------------
  volumeClaimTemplates:
{{- if .Values.coherence.persistence }}
{{-   if .Values.coherence.persistence.enabled }}
{{-     if not .Values.coherence.persistence.volume }}
    - metadata:
        name: persistence-volume
        labels:
{{- include "coherence.release_labels" . | indent 10 }}
          component: "coherence-vol"
      spec:
{{-       if .Values.coherence.persistence.persistentVolumeClaim }}
{{ toYaml .Values.coherence.persistence.persistentVolumeClaim | indent 8 }}
{{-       end }}
{{-     end }}
{{-   end }}
{{- end }}
{{- if .Values.coherence.snapshot }}
{{-   if .Values.coherence.snapshot.enabled }}
{{-     if not .Values.coherence.snapshot.volume }}
    - metadata:
        name: snapshot-volume
        labels:
{{- include "coherence.release_labels" . | indent 10 }}
          component: "coherence-vol"
      spec:
{{-       if .Values.coherence.snapshot.persistentVolumeClaim }}
{{ toYaml .Values.coherence.snapshot.persistentVolumeClaim | indent 8 }}
{{-       end }}
{{-     end }}
{{-   end }}
{{- end }}
{{- if .Values.volumeClaimTemplates }}
{{ toYaml .Values.volumeClaimTemplates | indent 4 }}
{{- end }}
