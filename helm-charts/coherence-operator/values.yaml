# Copyright 2019, 2020 Oracle Corporation and/or its affiliates.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at
# http://oss.oracle.com/licenses/upl.

# Deploy the CRDs used by Coherence Operator.
createCustomResource: false

# The name of the service account that the operator will use to
# make requests to the Kubernetes API server.
# The name must be lowercase.
serviceAccount: coherence-operator

# imagePullSecrets provides support pulling images from private registries, the value references
#   one or more secrets to be used when pulling images. Secrets must be manually created in the
#   target namespace.
#   ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#
#   For example, adding the pull secret "foo" would be:
#
#   imagePullSecrets:
#   - name: "foo"
#
#   adding multiple pull secrets "foo" and "bar" would be
#
#   imagePullSecrets:
#   - name: "foo"
#   - name: "bar"
imagePullSecrets:

# ---------------------------------------------------------------------------
# Pod scheduling values

# affinity controls Pod scheduling preferences.
#   ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity:

# nodeSelector is the Node labels for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector:

# tolerations is for nodes that have taints on them.
#   Useful if you want to dedicate nodes to just run the coherence container
#   For example:
#   tolerations:
#   - key: "key"
#     operator: "Equal"
#     value: "value"
#     effect: "NoSchedule"
#
#   ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations:

# coherenceOperator groups the values used to configure the Operator
coherenceOperator:
  # docker image pull the image from
  image: "${OPERATOR_IMAGE}"
  # imagePullPolicy controls the K8s container spec's pull policy
  # If not set the pull policy is "IfNotPresent".
  imagePullPolicy:
  defaultCoherenceImage: "${HELM_COHERENCE_IMAGE}"
  defaultCoherenceUtilsImage: "${UTILS_IMAGE}"

# Controls whether to install the demo Elasticsearch and Kibana stack
installEFK: false

# Specifies values for Kibana Dashboard Imports if logCaptureEnabled is true
dashboardImport:
  timeout: 60
  xpackauth:
    enabled: false
    username: myuser
    password: mypass
  dashboards:

# Specify the docker image containing Elasticsearch.
# These parameters are ignored if 'installEFK' is false
# or elasticsearchEndpoinit is set.
elasticsearch:
  image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6.0
  # imagePullPolicy controls the K8s container spec's pull policy
  # If not set the pull policy is "IfNotPresent".
  imagePullPolicy:

# Specify the information of an existing Elasticsearch stack to use
# if the demo EFK stack is not being used (i.e. installEFK is false).
# If none of these values are entered no monitoring secret will be
# created by the Helm chart. If Coherence clusters are created with
# log capture enabled then the coherence-monitoring-config secret
# must have been manually created.
elasticsearchEndpoint:
  # The Elasticsearch host if there is an existing one.
  # Default: "elasticsearch.${namespace}.svc.cluster.local"
  # where ${namespace} is the value of namespace for this release.
  host:
  # The Elasticsearch port to be accessed by fluentd.
  # Default: 9200
  port:
  # The Elasticsearch user to be accessed by fluentd.
  user:
  # The Elasticsearch password to be accessed by fluentd.
  password:
  # If you want to connect to more than one Elasticsearch nodes, specify this option in the following format:
  # hosts: host1:port1,host2:port2,host3:port3
  # or
  # hosts: https://customhost.com:443/path,https://username:password@host-failover.com:443
  hosts:
  # Specify https if your Elasticsearch endpoint supports SSL (default: http)
  scheme: http

# Specify the docker image containing Kibana.
# These parameters are ignored if 'installEFK' is false
# or elasticsearchEndpoinit is set.
kibana:
  image: docker.elastic.co/kibana/kibana-oss:6.6.0
  # imagePullPolicy controls the K8s container spec's pull policy
  # If not set the pull policy is "IfNotPresent".
  imagePullPolicy:

# Install coherence-service-monitor to enable prometheus scraping of coherence
# clusters.
# Disable this setting to enable using prometheus_io annotations in
# prometheusoperator.
# This parameter is ignored if 'prometheusoperator.enabled' is false.
coherenceServiceMonitorEnabled: true

# Subchart stable prometheus-operator
prometheusoperator:

  # prometheus-operator values documentation
  # ref: https://github.com/helm/charts/blob/master/stable/prometheus-operator/README.md

  # Enable prometheus-operator to enable collection of coherence metrics.
  enabled: false

  alertmanager:

    # disable by default until coherence alerts are created
    enabled: false

  grafana:

    # View coherence metrics using provided coherence-operator grafana dashboards.
    enabled: true
    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard

#  Example to enable scraping via prometheus_io annotations on coherence-service pods.
#  Be sure to set .Values.coherenceServiceMonitorEnabled to false.

#  prometheus:
#    prometheusSpec:
#
#      # Define prometheus annotations prometheus_io:[scrape,path,port].
#      # Add metrics labels namespace and pod.
#      # Drop unneeded relabels from metric labels.
#      additionalScrapeConfigs:
#      - job_name: 'prometheus-scrape-annotated-coherence-service-pods'
#        kubernetes_sd_configs:
#        - role: pod
#        relabel_configs:
#        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
#          action: keep
#          regex: true
#        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
#          action: replace
#          target_label: __metrics_path__
#          regex: (.+)
#        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
#          action: replace
#          regex: ([^:]+)(?::\d+)?;(\d+)
#          replacement: $1:$2
#          target_label: __address__
#        - source_labels: [__meta_kubernetes_namespace]
#          action: replace
#          target_label: namespace
#        - source_labels: [__meta_kubernetes_pod_name]
#          action: replace
#          target_label: pod
#        metric_relabel_configs:
#        - action: labeldrop
#          regex: '(instance|job)'
